// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/swap/in_flight_packet.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InFlightPacket struct {
	SrcPortId        string                `protobuf:"bytes,1,opt,name=src_port_id,json=srcPortId,proto3" json:"src_port_id,omitempty"`
	SrcChannelId     string                `protobuf:"bytes,2,opt,name=src_channel_id,json=srcChannelId,proto3" json:"src_channel_id,omitempty"`
	Sequence         uint64                `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	RetriesRemaining int32                 `protobuf:"varint,4,opt,name=retries_remaining,json=retriesRemaining,proto3" json:"retries_remaining,omitempty"`
	AmountOut        cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=amount_out,json=amountOut,proto3,customtype=cosmossdk.io/math.Int" json:"amount_out"`
	IncomingAck      []byte                `protobuf:"bytes,6,opt,name=incoming_ack,json=incomingAck,proto3" json:"incoming_ack,omitempty"`
	ReturnPortId     string                `protobuf:"bytes,7,opt,name=return_port_id,json=returnPortId,proto3" json:"return_port_id,omitempty"`
	ReturnChannelId  string                `protobuf:"bytes,8,opt,name=return_channel_id,json=returnChannelId,proto3" json:"return_channel_id,omitempty"`
}

func (m *InFlightPacket) Reset()         { *m = InFlightPacket{} }
func (m *InFlightPacket) String() string { return proto.CompactTextString(m) }
func (*InFlightPacket) ProtoMessage()    {}
func (*InFlightPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_80eca52a3b33713a, []int{0}
}
func (m *InFlightPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InFlightPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InFlightPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InFlightPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InFlightPacket.Merge(m, src)
}
func (m *InFlightPacket) XXX_Size() int {
	return m.Size()
}
func (m *InFlightPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InFlightPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InFlightPacket proto.InternalMessageInfo

func (m *InFlightPacket) GetSrcPortId() string {
	if m != nil {
		return m.SrcPortId
	}
	return ""
}

func (m *InFlightPacket) GetSrcChannelId() string {
	if m != nil {
		return m.SrcChannelId
	}
	return ""
}

func (m *InFlightPacket) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *InFlightPacket) GetRetriesRemaining() int32 {
	if m != nil {
		return m.RetriesRemaining
	}
	return 0
}

func (m *InFlightPacket) GetIncomingAck() []byte {
	if m != nil {
		return m.IncomingAck
	}
	return nil
}

func (m *InFlightPacket) GetReturnPortId() string {
	if m != nil {
		return m.ReturnPortId
	}
	return ""
}

func (m *InFlightPacket) GetReturnChannelId() string {
	if m != nil {
		return m.ReturnChannelId
	}
	return ""
}

func init() {
	proto.RegisterType((*InFlightPacket)(nil), "sunrise.swap.InFlightPacket")
}

func init() {
	proto.RegisterFile("sunrise/swap/in_flight_packet.proto", fileDescriptor_80eca52a3b33713a)
}

var fileDescriptor_80eca52a3b33713a = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0x4d, 0x8e, 0xd3, 0x30,
	0x18, 0x8d, 0x87, 0x99, 0x61, 0xea, 0x89, 0x0a, 0x8d, 0x40, 0x0a, 0x5d, 0xa4, 0xe1, 0x67, 0x11,
	0x15, 0x48, 0x90, 0x38, 0x01, 0x45, 0xaa, 0x94, 0x55, 0xab, 0x2c, 0xd9, 0x58, 0xae, 0x63, 0x12,
	0x2b, 0x8d, 0x1d, 0x6c, 0x47, 0xd0, 0x5b, 0x70, 0x0c, 0x96, 0x2c, 0x38, 0x44, 0x97, 0x15, 0x2b,
	0xc4, 0xa2, 0x42, 0xad, 0x10, 0xd7, 0x40, 0xb1, 0xd3, 0x6a, 0x36, 0x96, 0xdf, 0x8f, 0xfc, 0xe9,
	0xbd, 0xcf, 0xf0, 0xb9, 0x6a, 0xb9, 0x64, 0x8a, 0x26, 0xea, 0x33, 0x6e, 0x12, 0xc6, 0xd1, 0xc7,
	0x35, 0x2b, 0x4a, 0x8d, 0x1a, 0x4c, 0x2a, 0xaa, 0xe3, 0x46, 0x0a, 0x2d, 0x3c, 0xb7, 0x37, 0xc5,
	0x9d, 0x69, 0x3c, 0xc2, 0x35, 0xe3, 0x22, 0x31, 0xa7, 0x35, 0x8c, 0x9f, 0x10, 0xa1, 0x6a, 0xa1,
	0x90, 0x41, 0x89, 0x05, 0xbd, 0xf4, 0xa8, 0x10, 0x85, 0xb0, 0x7c, 0x77, 0xb3, 0xec, 0xb3, 0xbf,
	0x17, 0x70, 0x98, 0xf2, 0xb9, 0x99, 0xb5, 0x34, 0xa3, 0xbc, 0x00, 0xde, 0x2a, 0x49, 0x50, 0x23,
	0xa4, 0x46, 0x2c, 0xf7, 0x41, 0x08, 0xa2, 0x41, 0x36, 0x50, 0x92, 0x2c, 0x85, 0xd4, 0x69, 0xee,
	0xbd, 0x80, 0xc3, 0x4e, 0x27, 0x25, 0xe6, 0x9c, 0xae, 0x3b, 0xcb, 0x85, 0xb1, 0xb8, 0x4a, 0x92,
	0xf7, 0x96, 0x4c, 0x73, 0x6f, 0x0c, 0x6f, 0x14, 0xfd, 0xd4, 0x52, 0x4e, 0xa8, 0x7f, 0x2f, 0x04,
	0xd1, 0x65, 0x76, 0xc6, 0xde, 0x4b, 0x38, 0x92, 0x54, 0x4b, 0x46, 0x15, 0x92, 0xb4, 0xc6, 0x8c,
	0x33, 0x5e, 0xf8, 0x97, 0x21, 0x88, 0xae, 0xb2, 0x87, 0xbd, 0x90, 0x9d, 0x78, 0x6f, 0x01, 0x21,
	0xae, 0x45, 0xcb, 0x35, 0x12, 0xad, 0xf6, 0xaf, 0xba, 0x51, 0xb3, 0x37, 0xdb, 0xfd, 0xc4, 0xf9,
	0xbd, 0x9f, 0x3c, 0xb6, 0x09, 0x55, 0x5e, 0xc5, 0x4c, 0x24, 0x35, 0xd6, 0x65, 0x9c, 0x72, 0xfd,
	0xf3, 0xc7, 0x6b, 0xd8, 0x47, 0x4f, 0xb9, 0xfe, 0xf6, 0xef, 0xfb, 0x14, 0x64, 0x03, 0xfb, 0xc6,
	0xa2, 0xd5, 0xde, 0x53, 0xe8, 0x32, 0x4e, 0x44, 0xcd, 0x78, 0x81, 0x30, 0xa9, 0xfc, 0xeb, 0x10,
	0x44, 0x6e, 0x76, 0x7b, 0xe2, 0xde, 0x91, 0xaa, 0x8b, 0x28, 0xa9, 0x6e, 0x25, 0x3f, 0xb7, 0x70,
	0xdf, 0x46, 0xb4, 0x6c, 0x5f, 0xc4, 0xd4, 0xc4, 0xe8, 0x5c, 0x77, 0xba, 0xb8, 0x31, 0xc6, 0x07,
	0x56, 0x38, 0xd7, 0x31, 0x9b, 0x6f, 0x0f, 0x01, 0xd8, 0x1d, 0x02, 0xf0, 0xe7, 0x10, 0x80, 0xaf,
	0xc7, 0xc0, 0xd9, 0x1d, 0x03, 0xe7, 0xd7, 0x31, 0x70, 0x3e, 0xbc, 0x2a, 0x98, 0x2e, 0xdb, 0x55,
	0x4c, 0x44, 0x9d, 0xf4, 0xeb, 0x5d, 0xe3, 0x0d, 0x95, 0x27, 0x90, 0x7c, 0xb1, 0x5f, 0x42, 0x6f,
	0x1a, 0xaa, 0x56, 0xd7, 0x66, 0x6d, 0x6f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xad, 0xa2, 0xcf,
	0xd7, 0x2f, 0x02, 0x00, 0x00,
}

func (m *InFlightPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InFlightPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InFlightPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReturnChannelId) > 0 {
		i -= len(m.ReturnChannelId)
		copy(dAtA[i:], m.ReturnChannelId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.ReturnChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReturnPortId) > 0 {
		i -= len(m.ReturnPortId)
		copy(dAtA[i:], m.ReturnPortId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.ReturnPortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IncomingAck) > 0 {
		i -= len(m.IncomingAck)
		copy(dAtA[i:], m.IncomingAck)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.IncomingAck)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.RetriesRemaining != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.RetriesRemaining))
		i--
		dAtA[i] = 0x20
	}
	if m.Sequence != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChannelId) > 0 {
		i -= len(m.SrcChannelId)
		copy(dAtA[i:], m.SrcChannelId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.SrcChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcPortId) > 0 {
		i -= len(m.SrcPortId)
		copy(dAtA[i:], m.SrcPortId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.SrcPortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInFlightPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovInFlightPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InFlightPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcPortId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.SrcChannelId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovInFlightPacket(uint64(m.Sequence))
	}
	if m.RetriesRemaining != 0 {
		n += 1 + sovInFlightPacket(uint64(m.RetriesRemaining))
	}
	l = m.AmountOut.Size()
	n += 1 + l + sovInFlightPacket(uint64(l))
	l = len(m.IncomingAck)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.ReturnPortId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.ReturnChannelId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	return n
}

func sovInFlightPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInFlightPacket(x uint64) (n int) {
	return sovInFlightPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InFlightPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InFlightPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InFlightPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetriesRemaining", wireType)
			}
			m.RetriesRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetriesRemaining |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingAck", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncomingAck = append(m.IncomingAck[:0], dAtA[iNdEx:postIndex]...)
			if m.IncomingAck == nil {
				m.IncomingAck = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInFlightPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInFlightPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInFlightPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInFlightPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInFlightPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInFlightPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInFlightPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInFlightPacket = fmt.Errorf("proto: unexpected end of group")
)
