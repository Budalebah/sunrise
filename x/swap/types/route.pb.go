// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/swap/route.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Route struct {
	DenomIn  string `protobuf:"bytes,1,opt,name=denom_in,json=denomIn,proto3" json:"denom_in,omitempty"`
	DenomOut string `protobuf:"bytes,2,opt,name=denom_out,json=denomOut,proto3" json:"denom_out,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Route_Pool
	//	*Route_Series
	//	*Route_Parallel
	Type isRoute_Type `protobuf_oneof:"type"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f14633a5a6b5862, []int{0}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

type isRoute_Type interface {
	isRoute_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Route_Pool struct {
	Pool *RoutePool `protobuf:"bytes,3,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}
type Route_Series struct {
	Series *RouteSeries `protobuf:"bytes,4,opt,name=series,proto3,oneof" json:"series,omitempty"`
}
type Route_Parallel struct {
	Parallel *RouteParallel `protobuf:"bytes,5,opt,name=parallel,proto3,oneof" json:"parallel,omitempty"`
}

func (*Route_Pool) isRoute_Type()     {}
func (*Route_Series) isRoute_Type()   {}
func (*Route_Parallel) isRoute_Type() {}

func (m *Route) GetType() isRoute_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Route) GetDenomIn() string {
	if m != nil {
		return m.DenomIn
	}
	return ""
}

func (m *Route) GetDenomOut() string {
	if m != nil {
		return m.DenomOut
	}
	return ""
}

func (m *Route) GetPool() *RoutePool {
	if x, ok := m.GetType().(*Route_Pool); ok {
		return x.Pool
	}
	return nil
}

func (m *Route) GetSeries() *RouteSeries {
	if x, ok := m.GetType().(*Route_Series); ok {
		return x.Series
	}
	return nil
}

func (m *Route) GetParallel() *RouteParallel {
	if x, ok := m.GetType().(*Route_Parallel); ok {
		return x.Parallel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_Pool)(nil),
		(*Route_Series)(nil),
		(*Route_Parallel)(nil),
	}
}

type RoutePool struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *RoutePool) Reset()         { *m = RoutePool{} }
func (m *RoutePool) String() string { return proto.CompactTextString(m) }
func (*RoutePool) ProtoMessage()    {}
func (*RoutePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f14633a5a6b5862, []int{1}
}
func (m *RoutePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutePool.Merge(m, src)
}
func (m *RoutePool) XXX_Size() int {
	return m.Size()
}
func (m *RoutePool) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutePool.DiscardUnknown(m)
}

var xxx_messageInfo_RoutePool proto.InternalMessageInfo

func (m *RoutePool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type RouteSeries struct {
	Routes []Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes"`
}

func (m *RouteSeries) Reset()         { *m = RouteSeries{} }
func (m *RouteSeries) String() string { return proto.CompactTextString(m) }
func (*RouteSeries) ProtoMessage()    {}
func (*RouteSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f14633a5a6b5862, []int{2}
}
func (m *RouteSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteSeries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSeries.Merge(m, src)
}
func (m *RouteSeries) XXX_Size() int {
	return m.Size()
}
func (m *RouteSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSeries.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSeries proto.InternalMessageInfo

func (m *RouteSeries) GetRoutes() []Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type RouteParallel struct {
	Routes []WeightedRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes"`
}

func (m *RouteParallel) Reset()         { *m = RouteParallel{} }
func (m *RouteParallel) String() string { return proto.CompactTextString(m) }
func (*RouteParallel) ProtoMessage()    {}
func (*RouteParallel) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f14633a5a6b5862, []int{3}
}
func (m *RouteParallel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteParallel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteParallel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteParallel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteParallel.Merge(m, src)
}
func (m *RouteParallel) XXX_Size() int {
	return m.Size()
}
func (m *RouteParallel) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteParallel.DiscardUnknown(m)
}

var xxx_messageInfo_RouteParallel proto.InternalMessageInfo

func (m *RouteParallel) GetRoutes() []WeightedRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

type WeightedRoute struct {
	Weight cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight"`
	Route  Route                       `protobuf:"bytes,2,opt,name=route,proto3" json:"route"`
}

func (m *WeightedRoute) Reset()         { *m = WeightedRoute{} }
func (m *WeightedRoute) String() string { return proto.CompactTextString(m) }
func (*WeightedRoute) ProtoMessage()    {}
func (*WeightedRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f14633a5a6b5862, []int{4}
}
func (m *WeightedRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedRoute.Merge(m, src)
}
func (m *WeightedRoute) XXX_Size() int {
	return m.Size()
}
func (m *WeightedRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedRoute.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedRoute proto.InternalMessageInfo

func (m *WeightedRoute) GetRoute() Route {
	if m != nil {
		return m.Route
	}
	return Route{}
}

func init() {
	proto.RegisterType((*Route)(nil), "sunrise.swap.Route")
	proto.RegisterType((*RoutePool)(nil), "sunrise.swap.RoutePool")
	proto.RegisterType((*RouteSeries)(nil), "sunrise.swap.RouteSeries")
	proto.RegisterType((*RouteParallel)(nil), "sunrise.swap.RouteParallel")
	proto.RegisterType((*WeightedRoute)(nil), "sunrise.swap.WeightedRoute")
}

func init() { proto.RegisterFile("sunrise/swap/route.proto", fileDescriptor_4f14633a5a6b5862) }

var fileDescriptor_4f14633a5a6b5862 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x6a, 0x13, 0x51,
	0x14, 0x9e, 0x6b, 0x93, 0x69, 0x73, 0x62, 0x17, 0x5e, 0x85, 0x4c, 0x1a, 0x98, 0x86, 0xe0, 0x22,
	0x88, 0x9d, 0x8b, 0xad, 0x14, 0xdc, 0xb8, 0x08, 0x55, 0x52, 0x10, 0x2b, 0xe3, 0x42, 0x70, 0x13,
	0xa6, 0x33, 0x97, 0xc9, 0xe0, 0xcc, 0x9c, 0x61, 0xee, 0x8c, 0x35, 0x6f, 0xe1, 0xc6, 0x77, 0x70,
	0xe9, 0xc2, 0x87, 0xe8, 0xb2, 0xb8, 0x12, 0x17, 0x45, 0x12, 0xd0, 0xd7, 0x90, 0xfb, 0xd3, 0xd2,
	0x84, 0x48, 0x37, 0xc9, 0x9c, 0xfb, 0xfd, 0x9c, 0xef, 0x70, 0x0e, 0x38, 0xa2, 0xce, 0xcb, 0x44,
	0x70, 0x26, 0xce, 0x82, 0x82, 0x95, 0x58, 0x57, 0xdc, 0x2b, 0x4a, 0xac, 0x90, 0xde, 0x35, 0x88,
	0x27, 0x91, 0x9d, 0x7b, 0x41, 0x96, 0xe4, 0xc8, 0xd4, 0xaf, 0x26, 0xec, 0x74, 0x42, 0x14, 0x19,
	0x0a, 0x96, 0x89, 0x98, 0x7d, 0x7c, 0x22, 0xff, 0x0c, 0xd0, 0xd5, 0xc0, 0x44, 0x55, 0x4c, 0x17,
	0x06, 0x7a, 0x10, 0x63, 0x8c, 0xfa, 0x5d, 0x7e, 0x5d, 0x09, 0x96, 0x42, 0x14, 0x41, 0x19, 0x64,
	0x46, 0x30, 0xf8, 0x43, 0xa0, 0xe9, 0xcb, 0x54, 0xb4, 0x0b, 0x5b, 0x11, 0xcf, 0x31, 0x9b, 0x24,
	0xb9, 0x43, 0xfa, 0x64, 0xd8, 0xf2, 0x37, 0x55, 0x7d, 0x9c, 0xd3, 0x1e, 0xb4, 0x34, 0x84, 0x75,
	0xe5, 0xdc, 0x51, 0x98, 0xe6, 0x9e, 0xd4, 0x15, 0xdd, 0x83, 0x46, 0x81, 0x98, 0x3a, 0x1b, 0x7d,
	0x32, 0x6c, 0xef, 0x77, 0xbc, 0x9b, 0x63, 0x79, 0xca, 0xfa, 0x0d, 0x62, 0x3a, 0xb6, 0x7c, 0x45,
	0xa3, 0x07, 0x60, 0x0b, 0x5e, 0x26, 0x5c, 0x38, 0x0d, 0x25, 0xe8, 0xae, 0x11, 0xbc, 0x55, 0x84,
	0xb1, 0xe5, 0x1b, 0x2a, 0x7d, 0x06, 0x5b, 0x32, 0x75, 0x9a, 0xf2, 0xd4, 0x69, 0x2a, 0x59, 0x6f,
	0x5d, 0x1f, 0x43, 0x19, 0x5b, 0xfe, 0x35, 0x7d, 0x64, 0x43, 0xa3, 0x9a, 0x15, 0x7c, 0xf0, 0x10,
	0x5a, 0xd7, 0x61, 0x68, 0x07, 0x36, 0x65, 0x98, 0x49, 0x12, 0xa9, 0x51, 0x1b, 0xbe, 0x2d, 0xcb,
	0xe3, 0x68, 0xf0, 0x02, 0xda, 0x37, 0x12, 0xd0, 0x43, 0xb0, 0xd5, 0xca, 0x84, 0x43, 0xfa, 0x1b,
	0xc3, 0xf6, 0xfe, 0xfd, 0x35, 0x5d, 0x47, 0xad, 0xf3, 0xcb, 0x5d, 0xeb, 0xeb, 0xdf, 0x6f, 0x8f,
	0x88, 0x6f, 0xd8, 0x83, 0x13, 0xd8, 0x5e, 0x4a, 0x44, 0x9f, 0xaf, 0x18, 0xad, 0xc4, 0x7f, 0xc7,
	0x93, 0x78, 0x5a, 0xf1, 0xe8, 0xbf, 0x86, 0x5f, 0x08, 0x6c, 0x2f, 0x91, 0xe8, 0x6b, 0xb0, 0xcf,
	0xd4, 0x83, 0x5e, 0xd6, 0xe8, 0x50, 0x8a, 0x7e, 0x5d, 0xee, 0xf6, 0xf4, 0x3d, 0x88, 0xe8, 0x83,
	0x97, 0x20, 0xcb, 0x82, 0x6a, 0xea, 0xbd, 0xe2, 0x71, 0x10, 0xce, 0x8e, 0x78, 0xf8, 0xe3, 0xfb,
	0x1e, 0x98, 0x73, 0x39, 0xe2, 0xa1, 0xe9, 0xa0, 0x5d, 0xe8, 0x53, 0x68, 0xaa, 0x5e, 0x6a, 0xbf,
	0xb7, 0x4f, 0xaa, 0xc9, 0xa3, 0x97, 0xe7, 0x73, 0x97, 0x5c, 0xcc, 0x5d, 0xf2, 0x7b, 0xee, 0x92,
	0xcf, 0x0b, 0xd7, 0xba, 0x58, 0xb8, 0xd6, 0xcf, 0x85, 0x6b, 0xbd, 0x7f, 0x1c, 0x27, 0xd5, 0xb4,
	0x3e, 0xf5, 0x42, 0xcc, 0x98, 0xb1, 0x4a, 0x83, 0x19, 0x2f, 0xaf, 0x0a, 0xf6, 0x49, 0x5f, 0xa3,
	0x5c, 0x8e, 0x38, 0xb5, 0xd5, 0x35, 0x1e, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xa9, 0x1a,
	0x42, 0x2f, 0x03, 0x00, 0x00,
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Route_Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Route_Series) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Series) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Series != nil {
		{
			size, err := m.Series.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Route_Parallel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Parallel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Parallel != nil {
		{
			size, err := m.Parallel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RoutePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteSeries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSeries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteParallel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteParallel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteParallel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeightedRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *Route_Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *Route_Series) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Series != nil {
		l = m.Series.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *Route_Parallel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parallel != nil {
		l = m.Parallel.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *RoutePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovRoute(uint64(m.PoolId))
	}
	return n
}

func (m *RouteSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RouteParallel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *WeightedRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Weight.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.Route.Size()
	n += 1 + l + sovRoute(uint64(l))
	return n
}

func sovRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoute(x uint64) (n int) {
	return sovRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RoutePool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Route_Pool{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteSeries{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Route_Series{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteParallel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Route_Parallel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteParallel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteParallel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteParallel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, WeightedRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoute = fmt.Errorf("proto: unexpected end of group")
)
