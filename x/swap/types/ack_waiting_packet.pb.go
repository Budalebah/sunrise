// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/swap/ack_waiting_packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AckWaitingPacket struct {
	Index  PacketIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index"`
	Result RouteResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result"`
	Ack    []byte      `protobuf:"bytes,3,opt,name=ack,proto3" json:"ack,omitempty"`
	// Types that are valid to be assigned to Return:
	//	*AckWaitingPacket_InFlightIndexReturn
	//	*AckWaitingPacket_AckReturn
	Return isAckWaitingPacket_Return `protobuf_oneof:"return"`
	// Types that are valid to be assigned to Forward:
	//	*AckWaitingPacket_InFlightIndexForward
	//	*AckWaitingPacket_AckForward
	Forward isAckWaitingPacket_Forward `protobuf_oneof:"forward"`
}

func (m *AckWaitingPacket) Reset()         { *m = AckWaitingPacket{} }
func (m *AckWaitingPacket) String() string { return proto.CompactTextString(m) }
func (*AckWaitingPacket) ProtoMessage()    {}
func (*AckWaitingPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77dedc1ff7dee64, []int{0}
}
func (m *AckWaitingPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckWaitingPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckWaitingPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckWaitingPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckWaitingPacket.Merge(m, src)
}
func (m *AckWaitingPacket) XXX_Size() int {
	return m.Size()
}
func (m *AckWaitingPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_AckWaitingPacket.DiscardUnknown(m)
}

var xxx_messageInfo_AckWaitingPacket proto.InternalMessageInfo

type isAckWaitingPacket_Return interface {
	isAckWaitingPacket_Return()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAckWaitingPacket_Forward interface {
	isAckWaitingPacket_Forward()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AckWaitingPacket_InFlightIndexReturn struct {
	InFlightIndexReturn *PacketIndex `protobuf:"bytes,4,opt,name=in_flight_index_return,json=inFlightIndexReturn,proto3,oneof" json:"in_flight_index_return,omitempty"`
}
type AckWaitingPacket_AckReturn struct {
	AckReturn []byte `protobuf:"bytes,5,opt,name=ack_return,json=ackReturn,proto3,oneof" json:"ack_return,omitempty"`
}
type AckWaitingPacket_InFlightIndexForward struct {
	InFlightIndexForward *PacketIndex `protobuf:"bytes,6,opt,name=in_flight_index_forward,json=inFlightIndexForward,proto3,oneof" json:"in_flight_index_forward,omitempty"`
}
type AckWaitingPacket_AckForward struct {
	AckForward []byte `protobuf:"bytes,7,opt,name=ack_forward,json=ackForward,proto3,oneof" json:"ack_forward,omitempty"`
}

func (*AckWaitingPacket_InFlightIndexReturn) isAckWaitingPacket_Return()   {}
func (*AckWaitingPacket_AckReturn) isAckWaitingPacket_Return()             {}
func (*AckWaitingPacket_InFlightIndexForward) isAckWaitingPacket_Forward() {}
func (*AckWaitingPacket_AckForward) isAckWaitingPacket_Forward()           {}

func (m *AckWaitingPacket) GetReturn() isAckWaitingPacket_Return {
	if m != nil {
		return m.Return
	}
	return nil
}
func (m *AckWaitingPacket) GetForward() isAckWaitingPacket_Forward {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *AckWaitingPacket) GetIndex() PacketIndex {
	if m != nil {
		return m.Index
	}
	return PacketIndex{}
}

func (m *AckWaitingPacket) GetResult() RouteResult {
	if m != nil {
		return m.Result
	}
	return RouteResult{}
}

func (m *AckWaitingPacket) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *AckWaitingPacket) GetInFlightIndexReturn() *PacketIndex {
	if x, ok := m.GetReturn().(*AckWaitingPacket_InFlightIndexReturn); ok {
		return x.InFlightIndexReturn
	}
	return nil
}

func (m *AckWaitingPacket) GetAckReturn() []byte {
	if x, ok := m.GetReturn().(*AckWaitingPacket_AckReturn); ok {
		return x.AckReturn
	}
	return nil
}

func (m *AckWaitingPacket) GetInFlightIndexForward() *PacketIndex {
	if x, ok := m.GetForward().(*AckWaitingPacket_InFlightIndexForward); ok {
		return x.InFlightIndexForward
	}
	return nil
}

func (m *AckWaitingPacket) GetAckForward() []byte {
	if x, ok := m.GetForward().(*AckWaitingPacket_AckForward); ok {
		return x.AckForward
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AckWaitingPacket) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AckWaitingPacket_InFlightIndexReturn)(nil),
		(*AckWaitingPacket_AckReturn)(nil),
		(*AckWaitingPacket_InFlightIndexForward)(nil),
		(*AckWaitingPacket_AckForward)(nil),
	}
}

type PacketIndex struct {
	SrcPortId    string `protobuf:"bytes,1,opt,name=src_port_id,json=srcPortId,proto3" json:"src_port_id,omitempty"`
	SrcChannelId string `protobuf:"bytes,2,opt,name=src_channel_id,json=srcChannelId,proto3" json:"src_channel_id,omitempty"`
	Sequence     uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *PacketIndex) Reset()         { *m = PacketIndex{} }
func (m *PacketIndex) String() string { return proto.CompactTextString(m) }
func (*PacketIndex) ProtoMessage()    {}
func (*PacketIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77dedc1ff7dee64, []int{1}
}
func (m *PacketIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketIndex.Merge(m, src)
}
func (m *PacketIndex) XXX_Size() int {
	return m.Size()
}
func (m *PacketIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketIndex.DiscardUnknown(m)
}

var xxx_messageInfo_PacketIndex proto.InternalMessageInfo

func (m *PacketIndex) GetSrcPortId() string {
	if m != nil {
		return m.SrcPortId
	}
	return ""
}

func (m *PacketIndex) GetSrcChannelId() string {
	if m != nil {
		return m.SrcChannelId
	}
	return ""
}

func (m *PacketIndex) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*AckWaitingPacket)(nil), "sunrise.swap.AckWaitingPacket")
	proto.RegisterType((*PacketIndex)(nil), "sunrise.swap.PacketIndex")
}

func init() {
	proto.RegisterFile("sunrise/swap/ack_waiting_packet.proto", fileDescriptor_b77dedc1ff7dee64)
}

var fileDescriptor_b77dedc1ff7dee64 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xe3, 0x75, 0xeb, 0x16, 0xb7, 0x42, 0xc3, 0x4c, 0x90, 0xf5, 0x90, 0x8d, 0x09, 0xa4,
	0x09, 0xa1, 0x44, 0x82, 0x1b, 0xe2, 0x42, 0x91, 0xaa, 0xf5, 0x56, 0xf9, 0x82, 0xc4, 0x25, 0xf2,
	0x1c, 0x2f, 0xb5, 0x92, 0xda, 0xc1, 0x76, 0xd4, 0xed, 0x5b, 0xf0, 0x05, 0xb8, 0x73, 0xe4, 0x63,
	0xec, 0xb8, 0x23, 0x27, 0x84, 0xda, 0x03, 0x5f, 0x03, 0xf9, 0xcf, 0x50, 0x87, 0x26, 0xed, 0x52,
	0xf9, 0x7d, 0xfd, 0x7b, 0xde, 0xe7, 0xe9, 0x1b, 0xc3, 0x97, 0xba, 0x13, 0x8a, 0x6b, 0x96, 0xeb,
	0x25, 0x69, 0x73, 0x42, 0xeb, 0x62, 0x49, 0xb8, 0xe1, 0xa2, 0x2a, 0x5a, 0x42, 0x6b, 0x66, 0xb2,
	0x56, 0x49, 0x23, 0xd1, 0x30, 0x60, 0x99, 0xc5, 0x46, 0x8f, 0xc9, 0x82, 0x0b, 0x99, 0xbb, 0x5f,
	0x0f, 0x8c, 0x0e, 0xa9, 0xd4, 0x0b, 0xa9, 0x0b, 0x57, 0xe5, 0xbe, 0x08, 0x57, 0x07, 0x95, 0xac,
	0xa4, 0xef, 0xdb, 0x53, 0xe8, 0x26, 0x77, 0x8c, 0x95, 0xec, 0x0c, 0xf3, 0x37, 0x27, 0xdf, 0x7a,
	0x70, 0xff, 0x03, 0xad, 0x3f, 0xf9, 0x1c, 0x33, 0x17, 0x03, 0xbd, 0x83, 0x3b, 0x5c, 0x94, 0xec,
	0x32, 0x01, 0xc7, 0xe0, 0x74, 0xf0, 0xe6, 0x30, 0xdb, 0x0c, 0x94, 0x79, 0x68, 0x6a, 0x81, 0x71,
	0x7c, 0xfd, 0xeb, 0x28, 0xfa, 0xfe, 0xe7, 0xc7, 0x2b, 0x80, 0xbd, 0x04, 0xbd, 0x87, 0x7d, 0xc5,
	0x74, 0xd7, 0x98, 0x64, 0xeb, 0x3e, 0x31, 0xb6, 0xde, 0xd8, 0x01, 0x9b, 0xe2, 0xa0, 0x41, 0xfb,
	0xb0, 0x47, 0x68, 0x9d, 0xf4, 0x8e, 0xc1, 0xe9, 0x10, 0xdb, 0x23, 0x9a, 0xc1, 0xa7, 0x5c, 0x14,
	0x17, 0x0d, 0xaf, 0xe6, 0xa6, 0x70, 0x16, 0x85, 0x62, 0xa6, 0x53, 0x22, 0xd9, 0x7e, 0x20, 0xdc,
	0x59, 0x84, 0x9f, 0x70, 0x31, 0x71, 0x4a, 0xd7, 0xc0, 0x4e, 0x87, 0x8e, 0x20, 0xb4, 0xab, 0x0f,
	0x53, 0x76, 0xac, 0xd5, 0x59, 0x84, 0x63, 0x42, 0xeb, 0x00, 0x60, 0xf8, 0xec, 0x7f, 0xcb, 0x0b,
	0xa9, 0x96, 0x44, 0x95, 0x49, 0xff, 0x21, 0x4f, 0x80, 0x0f, 0xee, 0x78, 0x4e, 0xbc, 0x10, 0x3d,
	0x87, 0x03, 0x6b, 0x7a, 0x3b, 0x67, 0xd7, 0xb9, 0x02, 0x6c, 0x93, 0x04, 0x64, 0xbc, 0x67, 0x37,
	0x67, 0x03, 0x8c, 0x63, 0xb8, 0x1b, 0xc0, 0x13, 0x09, 0x07, 0x1b, 0xe3, 0x51, 0x0a, 0x07, 0x5a,
	0xd1, 0xa2, 0x95, 0xca, 0x14, 0xbc, 0x74, 0xdf, 0x27, 0xc6, 0xb1, 0x56, 0x74, 0x26, 0x95, 0x99,
	0x96, 0xe8, 0x05, 0x7c, 0x64, 0xef, 0xe9, 0x9c, 0x08, 0xc1, 0x1a, 0x8b, 0x6c, 0x39, 0x64, 0xa8,
	0x15, 0xfd, 0xe8, 0x9b, 0xd3, 0x12, 0x8d, 0xe0, 0x9e, 0x66, 0x5f, 0x3a, 0x26, 0x28, 0x73, 0xab,
	0xde, 0xc6, 0xff, 0xea, 0xf1, 0xe4, 0x7a, 0x95, 0x82, 0x9b, 0x55, 0x0a, 0x7e, 0xaf, 0x52, 0xf0,
	0x75, 0x9d, 0x46, 0x37, 0xeb, 0x34, 0xfa, 0xb9, 0x4e, 0xa3, 0xcf, 0xaf, 0x2b, 0x6e, 0xe6, 0xdd,
	0x79, 0x46, 0xe5, 0x22, 0x0f, 0xff, 0xbf, 0x21, 0x57, 0x4c, 0xdd, 0x16, 0xf9, 0xa5, 0x7f, 0x5e,
	0xe6, 0xaa, 0x65, 0xfa, 0xbc, 0xef, 0xde, 0xd7, 0xdb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01,
	0xb5, 0xd4, 0xe4, 0xf4, 0x02, 0x00, 0x00,
}

func (m *AckWaitingPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckWaitingPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckWaitingPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forward != nil {
		{
			size := m.Forward.Size()
			i -= size
			if _, err := m.Forward.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Return != nil {
		{
			size := m.Return.Size()
			i -= size
			if _, err := m.Return.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Ack) > 0 {
		i -= len(m.Ack)
		copy(dAtA[i:], m.Ack)
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(len(m.Ack)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AckWaitingPacket_InFlightIndexReturn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckWaitingPacket_InFlightIndexReturn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InFlightIndexReturn != nil {
		{
			size, err := m.InFlightIndexReturn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAckWaitingPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AckWaitingPacket_AckReturn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckWaitingPacket_AckReturn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckReturn != nil {
		i -= len(m.AckReturn)
		copy(dAtA[i:], m.AckReturn)
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(len(m.AckReturn)))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AckWaitingPacket_InFlightIndexForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckWaitingPacket_InFlightIndexForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InFlightIndexForward != nil {
		{
			size, err := m.InFlightIndexForward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAckWaitingPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AckWaitingPacket_AckForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckWaitingPacket_AckForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckForward != nil {
		i -= len(m.AckForward)
		copy(dAtA[i:], m.AckForward)
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(len(m.AckForward)))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PacketIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChannelId) > 0 {
		i -= len(m.SrcChannelId)
		copy(dAtA[i:], m.SrcChannelId)
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(len(m.SrcChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcPortId) > 0 {
		i -= len(m.SrcPortId)
		copy(dAtA[i:], m.SrcPortId)
		i = encodeVarintAckWaitingPacket(dAtA, i, uint64(len(m.SrcPortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAckWaitingPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovAckWaitingPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AckWaitingPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Index.Size()
	n += 1 + l + sovAckWaitingPacket(uint64(l))
	l = m.Result.Size()
	n += 1 + l + sovAckWaitingPacket(uint64(l))
	l = len(m.Ack)
	if l > 0 {
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	if m.Return != nil {
		n += m.Return.Size()
	}
	if m.Forward != nil {
		n += m.Forward.Size()
	}
	return n
}

func (m *AckWaitingPacket_InFlightIndexReturn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InFlightIndexReturn != nil {
		l = m.InFlightIndexReturn.Size()
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	return n
}
func (m *AckWaitingPacket_AckReturn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckReturn != nil {
		l = len(m.AckReturn)
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	return n
}
func (m *AckWaitingPacket_InFlightIndexForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InFlightIndexForward != nil {
		l = m.InFlightIndexForward.Size()
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	return n
}
func (m *AckWaitingPacket_AckForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckForward != nil {
		l = len(m.AckForward)
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	return n
}
func (m *PacketIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcPortId)
	if l > 0 {
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	l = len(m.SrcChannelId)
	if l > 0 {
		n += 1 + l + sovAckWaitingPacket(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovAckWaitingPacket(uint64(m.Sequence))
	}
	return n
}

func sovAckWaitingPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAckWaitingPacket(x uint64) (n int) {
	return sovAckWaitingPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AckWaitingPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAckWaitingPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckWaitingPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckWaitingPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ack = append(m.Ack[:0], dAtA[iNdEx:postIndex]...)
			if m.Ack == nil {
				m.Ack = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlightIndexReturn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PacketIndex{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Return = &AckWaitingPacket_InFlightIndexReturn{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReturn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Return = &AckWaitingPacket_AckReturn{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlightIndexForward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PacketIndex{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Forward = &AckWaitingPacket_InFlightIndexForward{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckForward", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Forward = &AckWaitingPacket_AckForward{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAckWaitingPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAckWaitingPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAckWaitingPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAckWaitingPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAckWaitingPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAckWaitingPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAckWaitingPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAckWaitingPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAckWaitingPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAckWaitingPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAckWaitingPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAckWaitingPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAckWaitingPacket = fmt.Errorf("proto: unexpected end of group")
)
