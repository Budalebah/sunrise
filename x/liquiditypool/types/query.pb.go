// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/liquiditypool/query.proto

package types

import (
	context "context"
	fmt "fmt"
<<<<<<< HEAD
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
=======
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryPoolRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{2}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

func (m *QueryPoolRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

<<<<<<< HEAD
type PoolInfo struct {
	Pool        Pool       `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
	AmountBase  types.Coin `protobuf:"bytes,2,opt,name=amount_base,json=amountBase,proto3" json:"amount_base"`
	AmountQuote types.Coin `protobuf:"bytes,3,opt,name=amount_quote,json=amountQuote,proto3" json:"amount_quote"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{3}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

func (m *PoolInfo) GetAmountBase() types.Coin {
	if m != nil {
		return m.AmountBase
	}
	return types.Coin{}
}

func (m *PoolInfo) GetAmountQuote() types.Coin {
	if m != nil {
		return m.AmountQuote
	}
	return types.Coin{}
}

type QueryGetPoolResponse struct {
	Pool PoolInfo `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
}

func (m *QueryGetPoolResponse) Reset()         { *m = QueryGetPoolResponse{} }
func (m *QueryGetPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolResponse) ProtoMessage()    {}
func (*QueryGetPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{4}
=======
type QueryPoolResponse struct {
	Pool       Pool       `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
	TokenBase  types.Coin `protobuf:"bytes,2,opt,name=token_base,json=tokenBase,proto3" json:"token_base"`
	TokenQuote types.Coin `protobuf:"bytes,3,opt,name=token_quote,json=tokenQuote,proto3" json:"token_quote"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{3}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

<<<<<<< HEAD
func (m *QueryGetPoolResponse) GetPool() PoolInfo {
=======
func (m *QueryPoolResponse) GetPool() Pool {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Pool
	}
	return PoolInfo{}
}

func (m *QueryPoolResponse) GetTokenBase() types.Coin {
	if m != nil {
		return m.TokenBase
	}
	return types.Coin{}
}

func (m *QueryPoolResponse) GetTokenQuote() types.Coin {
	if m != nil {
		return m.TokenQuote
	}
	return types.Coin{}
}

type QueryPoolsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

<<<<<<< HEAD
func (m *QueryAllPoolRequest) Reset()         { *m = QueryAllPoolRequest{} }
func (m *QueryAllPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolRequest) ProtoMessage()    {}
func (*QueryAllPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{5}
=======
func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{4}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

func (m *QueryPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

<<<<<<< HEAD
type QueryAllPoolResponse struct {
	Pool       []PoolInfo          `protobuf:"bytes,1,rep,name=Pool,proto3" json:"Pool"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolResponse) Reset()         { *m = QueryAllPoolResponse{} }
func (m *QueryAllPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolResponse) ProtoMessage()    {}
func (*QueryAllPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{6}
=======
type QueryPoolsResponse struct {
	Pools      []Pool              `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{5}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

<<<<<<< HEAD
func (m *QueryAllPoolResponse) GetPool() []PoolInfo {
=======
func (m *QueryPoolsResponse) GetPools() []Pool {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPositionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

<<<<<<< HEAD
func (m *QueryGetPositionRequest) Reset()         { *m = QueryGetPositionRequest{} }
func (m *QueryGetPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPositionRequest) ProtoMessage()    {}
func (*QueryGetPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{7}
=======
func (m *QueryPositionRequest) Reset()         { *m = QueryPositionRequest{} }
func (m *QueryPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionRequest) ProtoMessage()    {}
func (*QueryPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{6}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionRequest.Merge(m, src)
}
func (m *QueryPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionRequest proto.InternalMessageInfo

func (m *QueryPositionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

<<<<<<< HEAD
type PositionInfo struct {
	Position    Position   `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
	AmountBase  types.Coin `protobuf:"bytes,2,opt,name=amount_base,json=amountBase,proto3" json:"amount_base"`
	AmountQuote types.Coin `protobuf:"bytes,3,opt,name=amount_quote,json=amountQuote,proto3" json:"amount_quote"`
}

func (m *PositionInfo) Reset()         { *m = PositionInfo{} }
func (m *PositionInfo) String() string { return proto.CompactTextString(m) }
func (*PositionInfo) ProtoMessage()    {}
func (*PositionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{8}
}
func (m *PositionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionInfo.Merge(m, src)
}
func (m *PositionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PositionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PositionInfo proto.InternalMessageInfo

func (m *PositionInfo) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position{}
}

func (m *PositionInfo) GetAmountBase() types.Coin {
	if m != nil {
		return m.AmountBase
	}
	return types.Coin{}
}

func (m *PositionInfo) GetAmountQuote() types.Coin {
	if m != nil {
		return m.AmountQuote
	}
	return types.Coin{}
}

type QueryGetPositionResponse struct {
	Position PositionInfo `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
}

func (m *QueryGetPositionResponse) Reset()         { *m = QueryGetPositionResponse{} }
func (m *QueryGetPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPositionResponse) ProtoMessage()    {}
func (*QueryGetPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{9}
=======
type QueryPositionResponse struct {
	Position   Position   `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
	TokenBase  types.Coin `protobuf:"bytes,2,opt,name=token_base,json=tokenBase,proto3" json:"token_base"`
	TokenQuote types.Coin `protobuf:"bytes,3,opt,name=token_quote,json=tokenQuote,proto3" json:"token_quote"`
}

func (m *QueryPositionResponse) Reset()         { *m = QueryPositionResponse{} }
func (m *QueryPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionResponse) ProtoMessage()    {}
func (*QueryPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{7}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionResponse.Merge(m, src)
}
func (m *QueryPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionResponse proto.InternalMessageInfo

<<<<<<< HEAD
func (m *QueryGetPositionResponse) GetPosition() PositionInfo {
=======
func (m *QueryPositionResponse) GetPosition() Position {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Position
	}
	return PositionInfo{}
}

func (m *QueryPositionResponse) GetTokenBase() types.Coin {
	if m != nil {
		return m.TokenBase
	}
	return types.Coin{}
}

func (m *QueryPositionResponse) GetTokenQuote() types.Coin {
	if m != nil {
		return m.TokenQuote
	}
	return types.Coin{}
}

type QueryPositionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

<<<<<<< HEAD
func (m *QueryAllPositionRequest) Reset()         { *m = QueryAllPositionRequest{} }
func (m *QueryAllPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionRequest) ProtoMessage()    {}
func (*QueryAllPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{10}
=======
func (m *QueryPositionsRequest) Reset()         { *m = QueryPositionsRequest{} }
func (m *QueryPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsRequest) ProtoMessage()    {}
func (*QueryPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{8}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsRequest.Merge(m, src)
}
func (m *QueryPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsRequest proto.InternalMessageInfo

func (m *QueryPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

<<<<<<< HEAD
type QueryAllPositionResponse struct {
	Position   []PositionInfo      `protobuf:"bytes,1,rep,name=Position,proto3" json:"Position"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPositionResponse) Reset()         { *m = QueryAllPositionResponse{} }
func (m *QueryAllPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionResponse) ProtoMessage()    {}
func (*QueryAllPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{11}
=======
type QueryPositionsResponse struct {
	Positions  []Position          `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPositionsResponse) Reset()         { *m = QueryPositionsResponse{} }
func (m *QueryPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsResponse) ProtoMessage()    {}
func (*QueryPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{9}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}
func (m *QueryPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsResponse.Merge(m, src)
}
func (m *QueryPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsResponse proto.InternalMessageInfo

<<<<<<< HEAD
func (m *QueryAllPositionResponse) GetPosition() []PositionInfo {
=======
func (m *QueryPositionsResponse) GetPositions() []Position {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

<<<<<<< HEAD
type QueryPositionsByPoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPositionsByPoolRequest) Reset()         { *m = QueryPositionsByPoolRequest{} }
func (m *QueryPositionsByPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsByPoolRequest) ProtoMessage()    {}
func (*QueryPositionsByPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{12}
}
func (m *QueryPositionsByPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsByPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsByPoolRequest.Marshal(b, m, deterministic)
=======
type QueryAddressPositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressPositionsRequest) Reset()         { *m = QueryAddressPositionsRequest{} }
func (m *QueryAddressPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressPositionsRequest) ProtoMessage()    {}
func (*QueryAddressPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{10}
}
func (m *QueryAddressPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressPositionsRequest.Marshal(b, m, deterministic)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD
func (m *QueryPositionsByPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsByPoolRequest.Merge(m, src)
}
func (m *QueryPositionsByPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsByPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsByPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsByPoolRequest proto.InternalMessageInfo

func (m *QueryPositionsByPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryPositionsByPoolResponse struct {
	Positions []PositionInfo `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
}

func (m *QueryPositionsByPoolResponse) Reset()         { *m = QueryPositionsByPoolResponse{} }
func (m *QueryPositionsByPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsByPoolResponse) ProtoMessage()    {}
func (*QueryPositionsByPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{13}
}
func (m *QueryPositionsByPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsByPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsByPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsByPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsByPoolResponse.Merge(m, src)
}
func (m *QueryPositionsByPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsByPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsByPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsByPoolResponse proto.InternalMessageInfo

func (m *QueryPositionsByPoolResponse) GetPositions() []PositionInfo {
	if m != nil {
		return m.Positions
	}
	return nil
}

type QueryPositionsByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPositionsByAddressRequest) Reset()         { *m = QueryPositionsByAddressRequest{} }
func (m *QueryPositionsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsByAddressRequest) ProtoMessage()    {}
func (*QueryPositionsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{14}
}
func (m *QueryPositionsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsByAddressRequest.Merge(m, src)
}
func (m *QueryPositionsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsByAddressRequest proto.InternalMessageInfo

func (m *QueryPositionsByAddressRequest) GetAddress() string {
=======
func (m *QueryAddressPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressPositionsRequest.Merge(m, src)
}
func (m *QueryAddressPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressPositionsRequest proto.InternalMessageInfo

func (m *QueryAddressPositionsRequest) GetAddress() string {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Address
	}
	return ""
}

<<<<<<< HEAD
type QueryPositionsByAddressResponse struct {
	Positions []PositionInfo `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
}

func (m *QueryPositionsByAddressResponse) Reset()         { *m = QueryPositionsByAddressResponse{} }
func (m *QueryPositionsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsByAddressResponse) ProtoMessage()    {}
func (*QueryPositionsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{15}
}
func (m *QueryPositionsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsByAddressResponse.Marshal(b, m, deterministic)
=======
func (m *QueryAddressPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAddressPositionsResponse struct {
	Positions  []Position          `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressPositionsResponse) Reset()         { *m = QueryAddressPositionsResponse{} }
func (m *QueryAddressPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressPositionsResponse) ProtoMessage()    {}
func (*QueryAddressPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{11}
}
func (m *QueryAddressPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressPositionsResponse.Marshal(b, m, deterministic)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD
func (m *QueryPositionsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsByAddressResponse.Merge(m, src)
}
func (m *QueryPositionsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsByAddressResponse proto.InternalMessageInfo

func (m *QueryPositionsByAddressResponse) GetPositions() []PositionInfo {
=======
func (m *QueryAddressPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressPositionsResponse.Merge(m, src)
}
func (m *QueryAddressPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressPositionsResponse proto.InternalMessageInfo

func (m *QueryAddressPositionsResponse) GetPositions() []Position {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Positions
	}
	return nil
}

<<<<<<< HEAD
type QueryFeesByPositionIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryFeesByPositionIdRequest) Reset()         { *m = QueryFeesByPositionIdRequest{} }
func (m *QueryFeesByPositionIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeesByPositionIdRequest) ProtoMessage()    {}
func (*QueryFeesByPositionIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{16}
}
func (m *QueryFeesByPositionIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeesByPositionIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeesByPositionIdRequest.Marshal(b, m, deterministic)
=======
func (m *QueryAddressPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPositionFeesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPositionFeesRequest) Reset()         { *m = QueryPositionFeesRequest{} }
func (m *QueryPositionFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionFeesRequest) ProtoMessage()    {}
func (*QueryPositionFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{12}
}
func (m *QueryPositionFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionFeesRequest.Marshal(b, m, deterministic)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD
func (m *QueryFeesByPositionIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeesByPositionIdRequest.Merge(m, src)
}
func (m *QueryFeesByPositionIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeesByPositionIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeesByPositionIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeesByPositionIdRequest proto.InternalMessageInfo

func (m *QueryFeesByPositionIdRequest) GetId() uint64 {
=======
func (m *QueryPositionFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionFeesRequest.Merge(m, src)
}
func (m *QueryPositionFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionFeesRequest proto.InternalMessageInfo

func (m *QueryPositionFeesRequest) GetId() uint64 {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m != nil {
		return m.Id
	}
	return 0
}

<<<<<<< HEAD
type QueryFeesByPositionIdResponse struct {
	Fees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees"`
}

func (m *QueryFeesByPositionIdResponse) Reset()         { *m = QueryFeesByPositionIdResponse{} }
func (m *QueryFeesByPositionIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeesByPositionIdResponse) ProtoMessage()    {}
func (*QueryFeesByPositionIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{17}
}
func (m *QueryFeesByPositionIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeesByPositionIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeesByPositionIdResponse.Marshal(b, m, deterministic)
=======
type QueryPositionFeesResponse struct {
	FeeBase  types.Coin `protobuf:"bytes,1,opt,name=fee_base,json=feeBase,proto3" json:"fee_base"`
	FeeQuote types.Coin `protobuf:"bytes,2,opt,name=fee_quote,json=feeQuote,proto3" json:"fee_quote"`
}

func (m *QueryPositionFeesResponse) Reset()         { *m = QueryPositionFeesResponse{} }
func (m *QueryPositionFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionFeesResponse) ProtoMessage()    {}
func (*QueryPositionFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e0418c1aefaa4d, []int{13}
}
func (m *QueryPositionFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionFeesResponse.Marshal(b, m, deterministic)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD
func (m *QueryFeesByPositionIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeesByPositionIdResponse.Merge(m, src)
}
func (m *QueryFeesByPositionIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeesByPositionIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeesByPositionIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeesByPositionIdResponse proto.InternalMessageInfo

func (m *QueryFeesByPositionIdResponse) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
=======
func (m *QueryPositionFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionFeesResponse.Merge(m, src)
}
func (m *QueryPositionFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionFeesResponse proto.InternalMessageInfo

func (m *QueryPositionFeesResponse) GetFeeBase() types.Coin {
	if m != nil {
		return m.FeeBase
	}
	return types.Coin{}
}

func (m *QueryPositionFeesResponse) GetFeeQuote() types.Coin {
	if m != nil {
		return m.FeeQuote
	}
	return types.Coin{}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "sunrise.liquiditypool.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sunrise.liquiditypool.QueryParamsResponse")
<<<<<<< HEAD
	proto.RegisterType((*QueryGetPoolRequest)(nil), "sunrise.liquiditypool.QueryGetPoolRequest")
	proto.RegisterType((*PoolInfo)(nil), "sunrise.liquiditypool.PoolInfo")
	proto.RegisterType((*QueryGetPoolResponse)(nil), "sunrise.liquiditypool.QueryGetPoolResponse")
	proto.RegisterType((*QueryAllPoolRequest)(nil), "sunrise.liquiditypool.QueryAllPoolRequest")
	proto.RegisterType((*QueryAllPoolResponse)(nil), "sunrise.liquiditypool.QueryAllPoolResponse")
	proto.RegisterType((*QueryGetPositionRequest)(nil), "sunrise.liquiditypool.QueryGetPositionRequest")
	proto.RegisterType((*PositionInfo)(nil), "sunrise.liquiditypool.PositionInfo")
	proto.RegisterType((*QueryGetPositionResponse)(nil), "sunrise.liquiditypool.QueryGetPositionResponse")
	proto.RegisterType((*QueryAllPositionRequest)(nil), "sunrise.liquiditypool.QueryAllPositionRequest")
	proto.RegisterType((*QueryAllPositionResponse)(nil), "sunrise.liquiditypool.QueryAllPositionResponse")
	proto.RegisterType((*QueryPositionsByPoolRequest)(nil), "sunrise.liquiditypool.QueryPositionsByPoolRequest")
	proto.RegisterType((*QueryPositionsByPoolResponse)(nil), "sunrise.liquiditypool.QueryPositionsByPoolResponse")
	proto.RegisterType((*QueryPositionsByAddressRequest)(nil), "sunrise.liquiditypool.QueryPositionsByAddressRequest")
	proto.RegisterType((*QueryPositionsByAddressResponse)(nil), "sunrise.liquiditypool.QueryPositionsByAddressResponse")
	proto.RegisterType((*QueryFeesByPositionIdRequest)(nil), "sunrise.liquiditypool.QueryFeesByPositionIdRequest")
	proto.RegisterType((*QueryFeesByPositionIdResponse)(nil), "sunrise.liquiditypool.QueryFeesByPositionIdResponse")
=======
	proto.RegisterType((*QueryPoolRequest)(nil), "sunrise.liquiditypool.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "sunrise.liquiditypool.QueryPoolResponse")
	proto.RegisterType((*QueryPoolsRequest)(nil), "sunrise.liquiditypool.QueryPoolsRequest")
	proto.RegisterType((*QueryPoolsResponse)(nil), "sunrise.liquiditypool.QueryPoolsResponse")
	proto.RegisterType((*QueryPositionRequest)(nil), "sunrise.liquiditypool.QueryPositionRequest")
	proto.RegisterType((*QueryPositionResponse)(nil), "sunrise.liquiditypool.QueryPositionResponse")
	proto.RegisterType((*QueryPositionsRequest)(nil), "sunrise.liquiditypool.QueryPositionsRequest")
	proto.RegisterType((*QueryPositionsResponse)(nil), "sunrise.liquiditypool.QueryPositionsResponse")
	proto.RegisterType((*QueryAddressPositionsRequest)(nil), "sunrise.liquiditypool.QueryAddressPositionsRequest")
	proto.RegisterType((*QueryAddressPositionsResponse)(nil), "sunrise.liquiditypool.QueryAddressPositionsResponse")
	proto.RegisterType((*QueryPositionFeesRequest)(nil), "sunrise.liquiditypool.QueryPositionFeesRequest")
	proto.RegisterType((*QueryPositionFeesResponse)(nil), "sunrise.liquiditypool.QueryPositionFeesResponse")
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}

func init() { proto.RegisterFile("sunrise/liquiditypool/query.proto", fileDescriptor_c5e0418c1aefaa4d) }

var fileDescriptor_c5e0418c1aefaa4d = []byte{
<<<<<<< HEAD
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x24, 0x21, 0x69, 0x5e, 0x2a, 0x7e, 0x0c, 0x41, 0x35, 0x6e, 0xeb, 0x94, 0xe5, 0x57,
	0x6a, 0xda, 0xdd, 0x26, 0x69, 0x2a, 0x05, 0x0e, 0xd4, 0x46, 0x34, 0xea, 0x09, 0xc7, 0x17, 0x24,
	0x24, 0x64, 0x8d, 0xb3, 0x53, 0xb3, 0xb0, 0xde, 0x71, 0x3c, 0x6b, 0x84, 0x85, 0x22, 0x21, 0xfe,
	0x02, 0xa4, 0x22, 0x0e, 0x9c, 0x11, 0x42, 0x3d, 0xf1, 0x27, 0x20, 0x71, 0xa0, 0x07, 0x0e, 0x91,
	0x38, 0xc0, 0x09, 0x50, 0x82, 0xc4, 0x5f, 0xc0, 0x1d, 0xcd, 0xcc, 0x5b, 0xef, 0xae, 0xe3, 0xb5,
	0x77, 0xa5, 0x1c, 0x7a, 0x71, 0xbc, 0xb3, 0xef, 0x7b, 0xef, 0xfb, 0xbe, 0x79, 0xf3, 0x26, 0x86,
	0x97, 0xe4, 0x20, 0xe8, 0x7b, 0x92, 0x3b, 0xbe, 0x77, 0x38, 0xf0, 0x5c, 0x2f, 0x1c, 0xf6, 0x84,
	0xf0, 0x9d, 0xc3, 0x01, 0xef, 0x0f, 0xed, 0x5e, 0x5f, 0x84, 0x82, 0xbe, 0x80, 0x21, 0x76, 0x2a,
	0xa4, 0xfc, 0x1c, 0xeb, 0x7a, 0x81, 0x70, 0xf4, 0xa7, 0x89, 0x2c, 0xaf, 0x75, 0x44, 0x47, 0xe8,
	0xaf, 0x8e, 0xfa, 0x86, 0xab, 0x57, 0x3a, 0x42, 0x74, 0x7c, 0xee, 0xb0, 0x9e, 0xe7, 0xb0, 0x20,
	0x10, 0x21, 0x0b, 0x3d, 0x11, 0x48, 0x7c, 0x5b, 0x39, 0x10, 0xb2, 0x2b, 0xa4, 0xd3, 0x66, 0x92,
	0x3b, 0x9f, 0x6e, 0xb6, 0x79, 0xc8, 0x36, 0x9d, 0x03, 0xe1, 0x05, 0xf8, 0xbe, 0x9a, 0x7c, 0xaf,
	0x69, 0x8d, 0xa2, 0x7a, 0xac, 0xe3, 0x05, 0x3a, 0x19, 0xc6, 0x5a, 0x93, 0xc5, 0xf4, 0x58, 0x9f,
	0x75, 0xa3, 0x7a, 0xd7, 0x32, 0x62, 0x84, 0xf0, 0x31, 0xe2, 0x95, 0xac, 0x08, 0xe9, 0xc5, 0xb5,
	0xac, 0x35, 0xa0, 0xfb, 0x8a, 0x4d, 0x43, 0x27, 0x6f, 0xf2, 0xc3, 0x01, 0x97, 0xa1, 0xf5, 0x3e,
	0x3c, 0x9f, 0x5a, 0x95, 0x3d, 0x11, 0x48, 0x4e, 0xef, 0xc2, 0x92, 0x21, 0x51, 0x22, 0xd7, 0xc8,
	0xc6, 0xea, 0xd6, 0x55, 0x7b, 0xa2, 0xa7, 0xb6, 0x81, 0xd5, 0x57, 0x1e, 0xff, 0xb9, 0x3e, 0xf7,
	0xc3, 0xbf, 0x3f, 0x56, 0x49, 0x13, 0x71, 0xd6, 0xab, 0x98, 0x78, 0x8f, 0x87, 0x0d, 0x21, 0x7c,
	0xac, 0x47, 0x9f, 0x86, 0x79, 0xcf, 0xd5, 0x49, 0x17, 0x9b, 0xf3, 0x9e, 0x6b, 0xfd, 0x42, 0xe0,
	0x82, 0x7a, 0x7f, 0x3f, 0x78, 0x20, 0xe8, 0x0e, 0x2c, 0xaa, 0xac, 0x58, 0xf3, 0x72, 0x56, 0x4d,
	0x21, 0xfc, 0xfa, 0xa2, 0xaa, 0xd8, 0xd4, 0xe1, 0xf4, 0x2e, 0xac, 0xb2, 0xae, 0x18, 0x04, 0x61,
	0x4b, 0x79, 0x5e, 0x9a, 0xd7, 0xe8, 0x17, 0x6d, 0xb3, 0x0f, 0xb6, 0x5a, 0xb3, 0x71, 0x07, 0xec,
	0x77, 0x84, 0x17, 0x20, 0x16, 0x0c, 0xa6, 0xce, 0x24, 0xa7, 0x75, 0xb8, 0x88, 0x19, 0x0e, 0x07,
	0x22, 0xe4, 0xa5, 0x85, 0x7c, 0x29, 0xb0, 0xec, 0xbe, 0xc2, 0x58, 0xfb, 0xb0, 0x96, 0x16, 0x8c,
	0x56, 0xee, 0xa6, 0x44, 0xad, 0x4f, 0x11, 0xa5, 0x3c, 0x48, 0x0a, 0xb3, 0x3e, 0x44, 0x0f, 0x6b,
	0xbe, 0x9f, 0xf4, 0xf0, 0x1e, 0x40, 0xdc, 0x49, 0x98, 0xf7, 0xb5, 0x14, 0x57, 0x73, 0x1a, 0x22,
	0xc6, 0x0d, 0xd6, 0xe1, 0x88, 0x6d, 0x26, 0x90, 0xd6, 0xb7, 0x04, 0x29, 0x8f, 0xf2, 0xc7, 0x94,
	0x1b, 0x86, 0xf2, 0x42, 0x01, 0xca, 0xea, 0x99, 0xee, 0xa5, 0xb8, 0x99, 0xad, 0x78, 0x7d, 0x26,
	0x37, 0x53, 0x37, 0x45, 0xee, 0x3a, 0x5c, 0x8a, 0xed, 0x34, 0x8d, 0x9c, 0xd5, 0x43, 0xbf, 0x13,
	0xb8, 0x18, 0xc5, 0xe8, 0x3e, 0xaa, 0xc1, 0x85, 0xa8, 0xf9, 0x67, 0xda, 0x6e, 0xc2, 0x50, 0xc3,
	0x08, 0xf6, 0x84, 0xf4, 0x14, 0x83, 0xd2, 0x59, 0x13, 0x70, 0x93, 0xde, 0x3d, 0x23, 0xf2, 0xe5,
	0x19, 0x22, 0x13, 0x9b, 0x35, 0x82, 0x5a, 0x0c, 0x7d, 0xd6, 0x3d, 0x90, 0xf6, 0xf9, 0xbc, 0xfa,
	0xec, 0x11, 0x41, 0x19, 0xa9, 0x1a, 0xb1, 0x8c, 0x46, 0x2c, 0x63, 0xa1, 0xa0, 0x8c, 0x68, 0xed,
	0xfc, 0xfa, 0xee, 0x0e, 0x5c, 0x36, 0x03, 0x11, 0x33, 0xcb, 0xfa, 0x30, 0x79, 0xf6, 0x2e, 0xc1,
	0xb2, 0x22, 0xd3, 0x1a, 0x35, 0xe0, 0x92, 0x7a, 0xbc, 0xef, 0x5a, 0x1d, 0xb8, 0x32, 0x19, 0x87,
	0x3a, 0xf7, 0x60, 0x25, 0xf2, 0x5c, 0x16, 0x17, 0x1a, 0x63, 0xad, 0x37, 0xa1, 0x32, 0x5e, 0xa8,
	0xe6, 0xba, 0x7d, 0x2e, 0xa3, 0x99, 0x4e, 0x4b, 0xb0, 0xcc, 0xcc, 0x8a, 0xe6, 0xb8, 0xd2, 0x8c,
	0x1e, 0xad, 0x8f, 0x61, 0x3d, 0x13, 0x7b, 0xde, 0x3c, 0x6d, 0x34, 0xe4, 0x1e, 0xe7, 0xda, 0x0b,
	0x8c, 0x75, 0xb3, 0x4e, 0xf1, 0x17, 0x04, 0xae, 0x66, 0x00, 0x90, 0x5a, 0x0b, 0x16, 0x1f, 0x70,
	0x1e, 0xb1, 0x9a, 0x72, 0x92, 0x6e, 0x29, 0x2e, 0x8f, 0xfe, 0x5a, 0xdf, 0xe8, 0x78, 0xe1, 0x47,
	0x83, 0xb6, 0x7d, 0x20, 0xba, 0x0e, 0xde, 0xca, 0xe6, 0xcf, 0x4d, 0xe9, 0x7e, 0xe2, 0x84, 0xc3,
	0x1e, 0x97, 0x1a, 0x20, 0x9b, 0x3a, 0xf1, 0xd6, 0x7f, 0x00, 0x4f, 0x69, 0x0a, 0xf4, 0x21, 0x81,
	0x25, 0x73, 0xb7, 0xd1, 0xeb, 0x19, 0xea, 0xcf, 0x5e, 0xa6, 0xe5, 0x6a, 0x9e, 0x50, 0x23, 0xc6,
	0xda, 0xfa, 0xf2, 0xb7, 0x7f, 0x1e, 0xce, 0xdf, 0xa0, 0x55, 0x07, 0x31, 0x3e, 0x1b, 0xf2, 0xbe,
	0x33, 0xed, 0x1f, 0x02, 0xfa, 0x0d, 0x31, 0x83, 0x99, 0x4e, 0x2d, 0x94, 0xbe, 0x71, 0xcb, 0x6f,
	0xe4, 0x8a, 0x45, 0x56, 0x3b, 0x9a, 0x95, 0x43, 0x6f, 0xe6, 0x62, 0xa5, 0x3e, 0x3e, 0xf7, 0xdc,
	0x23, 0xfa, 0x35, 0x81, 0x65, 0x95, 0xa7, 0xe6, 0xcf, 0xe0, 0x96, 0xbe, 0xc9, 0xa6, 0x73, 0x1b,
	0xbb, 0x95, 0xac, 0x5b, 0x9a, 0x5b, 0x95, 0x6e, 0xe4, 0xe5, 0x46, 0xbf, 0x27, 0xf1, 0x70, 0xa1,
	0xf6, 0x4c, 0x1f, 0x52, 0xd3, 0xaf, 0xec, 0xe4, 0x8e, 0x47, 0x7e, 0xbb, 0x9a, 0xdf, 0x36, 0xdd,
	0xcc, 0xc7, 0xcf, 0xa0, 0x8d, 0x7f, 0xdf, 0x11, 0x58, 0x8d, 0xf2, 0x29, 0x0f, 0xed, 0x99, 0xbe,
	0x14, 0xe0, 0x3a, 0x61, 0xea, 0x5a, 0xb7, 0x35, 0x57, 0x9b, 0xde, 0x28, 0xc2, 0x95, 0xfe, 0x4c,
	0xe0, 0x99, 0xb1, 0xf9, 0x46, 0xb7, 0xa6, 0xf6, 0xfc, 0xc4, 0x21, 0x5a, 0xde, 0x2e, 0x84, 0x41,
	0xca, 0x7b, 0x9a, 0x72, 0x8d, 0xbe, 0x5d, 0x84, 0xb2, 0x6c, 0xb5, 0x87, 0x2d, 0xd3, 0xa7, 0x38,
	0xb6, 0x8f, 0xe8, 0xaf, 0x04, 0xe8, 0xd9, 0x01, 0x48, 0x77, 0x72, 0x92, 0x4a, 0x0f, 0xdb, 0xf2,
	0x9d, 0xa2, 0xb0, 0x73, 0x92, 0x83, 0x23, 0xfd, 0x88, 0xfe, 0x44, 0xe0, 0xd9, 0xf1, 0x91, 0x49,
	0xa7, 0x3a, 0x9c, 0x31, 0x91, 0xcb, 0xb7, 0x8b, 0x81, 0x50, 0x48, 0x4d, 0x0b, 0x79, 0x8b, 0xee,
	0xe6, 0x11, 0xa2, 0xc6, 0xac, 0xd1, 0x90, 0x68, 0xff, 0xfa, 0x7b, 0x8f, 0x4f, 0x2a, 0xe4, 0xf8,
	0xa4, 0x42, 0xfe, 0x3e, 0xa9, 0x90, 0xaf, 0x4e, 0x2b, 0x73, 0xc7, 0xa7, 0x95, 0xb9, 0x3f, 0x4e,
	0x2b, 0x73, 0x1f, 0xec, 0x24, 0x26, 0xf8, 0xc4, 0xf4, 0x9f, 0x8d, 0x15, 0xd0, 0x43, 0xbd, 0xbd,
	0xa4, 0x7f, 0xf2, 0x6c, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x15, 0x9b, 0xee, 0xa9, 0x2d, 0x0e,
	0x00, 0x00,
=======
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x4f, 0x13, 0x5b,
	0x14, 0xee, 0x2d, 0xe5, 0x47, 0x0f, 0x2f, 0x2f, 0x70, 0x1f, 0xbc, 0x94, 0x3e, 0x28, 0xbc, 0xc9,
	0x0b, 0x3f, 0x0a, 0xcc, 0x85, 0x02, 0x8f, 0x48, 0x8c, 0x48, 0x49, 0x60, 0x29, 0x74, 0x63, 0xa2,
	0x0b, 0x32, 0xa5, 0x97, 0x3a, 0xb1, 0x9d, 0xdb, 0x76, 0xa6, 0xc6, 0x86, 0x90, 0x18, 0x37, 0x2e,
	0xd5, 0x10, 0xdd, 0x1a, 0x37, 0xc6, 0x8d, 0x89, 0xf1, 0x8f, 0x30, 0x2c, 0x5c, 0x90, 0xb8, 0x71,
	0x61, 0x8c, 0x01, 0x13, 0xff, 0x0d, 0x33, 0xf7, 0xde, 0xe9, 0x2f, 0x3a, 0xe5, 0x62, 0x58, 0xb0,
	0x21, 0xc3, 0xcc, 0x77, 0xce, 0xf7, 0x9d, 0xef, 0x9e, 0x73, 0x6e, 0xe1, 0x5f, 0xbb, 0x6c, 0x95,
	0x4c, 0x9b, 0x92, 0x9c, 0x59, 0x2c, 0x9b, 0x19, 0xd3, 0xa9, 0x14, 0x18, 0xcb, 0x91, 0x62, 0x99,
	0x96, 0x2a, 0x7a, 0xa1, 0xc4, 0x1c, 0x86, 0x07, 0x25, 0x44, 0x6f, 0x80, 0x44, 0xfb, 0x8d, 0xbc,
	0x69, 0x31, 0xc2, 0xff, 0x0a, 0x64, 0x74, 0x20, 0xcb, 0xb2, 0x8c, 0x3f, 0x12, 0xf7, 0x49, 0xbe,
	0x1d, 0xce, 0x32, 0x96, 0xcd, 0x51, 0x62, 0x14, 0x4c, 0x62, 0x58, 0x16, 0x73, 0x0c, 0xc7, 0x64,
	0x96, 0x2d, 0xbf, 0xc6, 0x77, 0x99, 0x9d, 0x67, 0x36, 0x49, 0x1b, 0x36, 0x15, 0xb4, 0xe4, 0xc1,
	0x7c, 0x9a, 0x3a, 0xc6, 0x3c, 0x29, 0x18, 0x59, 0xd3, 0xe2, 0x60, 0x89, 0x8d, 0xd5, 0x63, 0x3d,
	0xd4, 0x2e, 0x33, 0xbd, 0xef, 0x5a, 0xeb, 0x62, 0x0a, 0x46, 0xc9, 0xc8, 0x7b, 0x7c, 0x63, 0x3e,
	0x18, 0xc6, 0x72, 0x12, 0xf1, 0x9f, 0x1f, 0xc2, 0x36, 0x6b, 0x5a, 0xb4, 0x01, 0xc0, 0xdb, 0xae,
	0xda, 0x2d, 0x9e, 0x3c, 0x45, 0x8b, 0x65, 0x6a, 0x3b, 0xda, 0x6d, 0xf8, 0xab, 0xe1, 0xad, 0x5d,
	0x60, 0x96, 0x4d, 0xf1, 0x4d, 0xe8, 0x12, 0x22, 0x22, 0x68, 0x0c, 0x4d, 0xf6, 0x26, 0x46, 0xf4,
	0x96, 0x9e, 0xea, 0x22, 0x2c, 0x19, 0x3e, 0xfa, 0x36, 0x1a, 0x78, 0xfb, 0xf3, 0x7d, 0x1c, 0xa5,
	0x64, 0x9c, 0xa6, 0x41, 0x9f, 0x48, 0xcc, 0x58, 0x4e, 0x92, 0xe1, 0x3f, 0x21, 0x68, 0x66, 0x78,
	0xc6, 0x50, 0x2a, 0x68, 0x66, 0xb4, 0x4f, 0x08, 0xfa, 0xeb, 0x40, 0x92, 0x7b, 0x09, 0x42, 0x6e,
	0x6e, 0xc9, 0xfc, 0x8f, 0x1f, 0x33, 0x63, 0xb9, 0x64, 0xc8, 0xe5, 0x4d, 0x71, 0x38, 0xbe, 0x01,
	0xe0, 0xb0, 0xfb, 0xd4, 0xda, 0x71, 0xcd, 0x8e, 0x04, 0x79, 0xf0, 0x90, 0x2e, 0x0e, 0x40, 0x77,
	0xdf, 0xe9, 0xf2, 0x00, 0xf4, 0x75, 0x66, 0x5a, 0x32, 0x34, 0xcc, 0x43, 0x92, 0x06, 0x2f, 0xb9,
	0x57, 0xc4, 0x17, 0xcb, 0xcc, 0xa1, 0x91, 0x0e, 0xb5, 0x04, 0x82, 0x73, 0xdb, 0x0d, 0xd1, 0xee,
	0xd6, 0x55, 0xe3, 0x19, 0x8c, 0x37, 0x00, 0x6a, 0x6d, 0x21, 0x6b, 0x1a, 0x6f, 0xc8, 0x2a, 0x5a,
	0xd7, 0xcb, 0xbd, 0x65, 0x64, 0xa9, 0x8c, 0x4d, 0xd5, 0x45, 0x6a, 0x2f, 0x91, 0x77, 0x7e, 0x22,
	0xbb, 0x34, 0x6b, 0x19, 0x3a, 0xdd, 0xea, 0xdd, 0x73, 0xea, 0x50, 0x73, 0x4b, 0xe0, 0xf1, 0x66,
	0x83, 0x2e, 0x61, 0xd7, 0xc4, 0xb9, 0xba, 0x04, 0x6b, 0x83, 0xb0, 0x71, 0x18, 0x90, 0xba, 0x44,
	0xbb, 0xf9, 0x1d, 0xf6, 0x57, 0x04, 0x83, 0x4d, 0x40, 0x59, 0xc3, 0x1a, 0xf4, 0x78, 0xbd, 0x2a,
	0x0d, 0x1a, 0xf5, 0x2d, 0x43, 0xc0, 0x64, 0x29, 0xd5, 0xb0, 0x2b, 0x70, 0xf8, 0x3b, 0x4d, 0xd5,
	0x5d, 0x7a, 0x03, 0xbc, 0x41, 0xf0, 0x77, 0x33, 0x83, 0x34, 0x70, 0x1d, 0xc2, 0x9e, 0x13, 0x5e,
	0x23, 0x28, 0x3a, 0x58, 0x8b, 0xbb, 0xbc, 0x86, 0x78, 0x84, 0x60, 0x98, 0x0b, 0x5d, 0xcb, 0x64,
	0x4a, 0xd4, 0xb6, 0xcf, 0x38, 0x12, 0x81, 0x6e, 0x43, 0x7c, 0xe2, 0x76, 0x84, 0x53, 0xde, 0xbf,
	0x4d, 0x5e, 0x05, 0x7f, 0xdb, 0xab, 0x77, 0x08, 0x46, 0x7c, 0x24, 0x5c, 0x49, 0xcb, 0xe2, 0x10,
	0x69, 0x38, 0xda, 0x0d, 0x4a, 0x6d, 0xbf, 0x39, 0x7a, 0x81, 0x60, 0xa8, 0x05, 0x58, 0xd6, 0xb5,
	0x02, 0x3d, 0x7b, 0x94, 0x8a, 0x31, 0x40, 0x6a, 0x5d, 0xdc, 0xbd, 0x47, 0x29, 0x1f, 0x82, 0xeb,
	0x10, 0x76, 0x63, 0xc5, 0x08, 0x28, 0xce, 0x90, 0xcb, 0xc6, 0x07, 0x20, 0xf1, 0x24, 0x0c, 0x9d,
	0x5c, 0x17, 0x3e, 0x44, 0xd0, 0x25, 0x2e, 0x06, 0x3c, 0xe5, 0xe3, 0xe9, 0xd9, 0x9b, 0x28, 0x1a,
	0x57, 0x81, 0x8a, 0x2a, 0xb5, 0xc4, 0xe3, 0xcf, 0x3f, 0x0e, 0x83, 0x33, 0x38, 0x4e, 0x64, 0x4c,
	0xce, 0xa8, 0xd0, 0x12, 0x69, 0x77, 0x9b, 0xe2, 0xe7, 0x08, 0x42, 0xee, 0x1a, 0xc4, 0x13, 0x6d,
	0x89, 0x6a, 0xd7, 0x55, 0x74, 0xf2, 0x7c, 0xa0, 0xd4, 0xf3, 0x3f, 0xd7, 0x33, 0x87, 0x75, 0x25,
	0x3d, 0xee, 0xfe, 0x25, 0xfb, 0x66, 0xe6, 0x00, 0x3f, 0x45, 0xd0, 0xc9, 0xf7, 0x39, 0x3e, 0x97,
	0xab, 0xea, 0xd3, 0x94, 0x02, 0x52, 0xca, 0x9a, 0xe7, 0xb2, 0xa6, 0xf1, 0x94, 0xb2, 0x2c, 0xfc,
	0x1a, 0x41, 0x8f, 0xd7, 0x58, 0x78, 0xba, 0x3d, 0x55, 0xc3, 0xbe, 0x8f, 0xce, 0xa8, 0x81, 0xa5,
	0xb4, 0x15, 0x2e, 0x6d, 0x11, 0x27, 0xd4, 0xa4, 0xc9, 0x89, 0x13, 0xae, 0xbd, 0x42, 0x10, 0xae,
	0x4e, 0x34, 0x56, 0xe2, 0xad, 0xba, 0x37, 0xab, 0x88, 0x96, 0x32, 0x97, 0xb8, 0x4c, 0x82, 0x67,
	0x2f, 0x24, 0x13, 0x7f, 0x44, 0xd0, 0xd7, 0xbc, 0x7a, 0xf0, 0x42, 0x3b, 0x6a, 0x9f, 0x5d, 0x19,
	0x5d, 0xbc, 0x58, 0x90, 0x94, 0xbd, 0xc9, 0x65, 0xaf, 0xe1, 0x55, 0x15, 0xd9, 0x72, 0xf9, 0x92,
	0x7d, 0xf9, 0x70, 0x50, 0x57, 0xc8, 0x07, 0x04, 0x7f, 0xd4, 0xef, 0x19, 0x4c, 0x54, 0xfc, 0xab,
	0x5b, 0x5f, 0xd1, 0x39, 0xf5, 0x00, 0x29, 0x7e, 0x95, 0x8b, 0xbf, 0x86, 0x97, 0x2f, 0xde, 0x1a,
	0x64, 0x8f, 0x52, 0x3b, 0x79, 0xeb, 0xe8, 0x24, 0x86, 0x8e, 0x4f, 0x62, 0xe8, 0xfb, 0x49, 0x0c,
	0x3d, 0x3b, 0x8d, 0x05, 0x8e, 0x4f, 0x63, 0x81, 0x2f, 0xa7, 0xb1, 0xc0, 0x9d, 0xa5, 0xac, 0xe9,
	0xdc, 0x2b, 0xa7, 0xf5, 0x5d, 0x96, 0x6f, 0x9d, 0xfc, 0x61, 0x53, 0x7a, 0xa7, 0x52, 0xa0, 0x76,
	0xba, 0x8b, 0xff, 0x82, 0x5e, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0x07, 0xb8, 0x7f, 0x02, 0x7c,
	0x0c, 0x00, 0x00,
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Pool items.
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	// Queries a list of Position items.
<<<<<<< HEAD
	Position(ctx context.Context, in *QueryGetPositionRequest, opts ...grpc.CallOption) (*QueryGetPositionResponse, error)
	PositionAll(ctx context.Context, in *QueryAllPositionRequest, opts ...grpc.CallOption) (*QueryAllPositionResponse, error)
	PositionsByPool(ctx context.Context, in *QueryPositionsByPoolRequest, opts ...grpc.CallOption) (*QueryPositionsByPoolResponse, error)
	PositionsByAddress(ctx context.Context, in *QueryPositionsByAddressRequest, opts ...grpc.CallOption) (*QueryPositionsByAddressResponse, error)
	// Query fees by position id
	FeesByPositionId(ctx context.Context, in *QueryFeesByPositionIdRequest, opts ...grpc.CallOption) (*QueryFeesByPositionIdResponse, error)
=======
	Position(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error)
	AddressPositions(ctx context.Context, in *QueryAddressPositionsRequest, opts ...grpc.CallOption) (*QueryAddressPositionsResponse, error)
	PositionFees(ctx context.Context, in *QueryPositionFeesRequest, opts ...grpc.CallOption) (*QueryPositionFeesResponse, error)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Position(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/Position", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error) {
	out := new(QueryPositionsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/Positions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressPositions(ctx context.Context, in *QueryAddressPositionsRequest, opts ...grpc.CallOption) (*QueryAddressPositionsResponse, error) {
	out := new(QueryAddressPositionsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/AddressPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionFees(ctx context.Context, in *QueryPositionFeesRequest, opts ...grpc.CallOption) (*QueryPositionFeesResponse, error) {
	out := new(QueryPositionFeesResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/PositionFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionsByPool(ctx context.Context, in *QueryPositionsByPoolRequest, opts ...grpc.CallOption) (*QueryPositionsByPoolResponse, error) {
	out := new(QueryPositionsByPoolResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/PositionsByPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionsByAddress(ctx context.Context, in *QueryPositionsByAddressRequest, opts ...grpc.CallOption) (*QueryPositionsByAddressResponse, error) {
	out := new(QueryPositionsByAddressResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/PositionsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeesByPositionId(ctx context.Context, in *QueryFeesByPositionIdRequest, opts ...grpc.CallOption) (*QueryFeesByPositionIdResponse, error) {
	out := new(QueryFeesByPositionIdResponse)
	err := c.cc.Invoke(ctx, "/sunrise.liquiditypool.Query/FeesByPositionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Pool items.
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	// Queries a list of Position items.
<<<<<<< HEAD
	Position(context.Context, *QueryGetPositionRequest) (*QueryGetPositionResponse, error)
	PositionAll(context.Context, *QueryAllPositionRequest) (*QueryAllPositionResponse, error)
	PositionsByPool(context.Context, *QueryPositionsByPoolRequest) (*QueryPositionsByPoolResponse, error)
	PositionsByAddress(context.Context, *QueryPositionsByAddressRequest) (*QueryPositionsByAddressResponse, error)
	// Query fees by position id
	FeesByPositionId(context.Context, *QueryFeesByPositionIdRequest) (*QueryFeesByPositionIdResponse, error)
=======
	Position(context.Context, *QueryPositionRequest) (*QueryPositionResponse, error)
	Positions(context.Context, *QueryPositionsRequest) (*QueryPositionsResponse, error)
	AddressPositions(context.Context, *QueryAddressPositionsRequest) (*QueryAddressPositionsResponse, error)
	PositionFees(context.Context, *QueryPositionFeesRequest) (*QueryPositionFeesResponse, error)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) Position(ctx context.Context, req *QueryPositionRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Position not implemented")
}
func (*UnimplementedQueryServer) Positions(ctx context.Context, req *QueryPositionsRequest) (*QueryPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Positions not implemented")
}
func (*UnimplementedQueryServer) AddressPositions(ctx context.Context, req *QueryAddressPositionsRequest) (*QueryAddressPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressPositions not implemented")
}
func (*UnimplementedQueryServer) PositionFees(ctx context.Context, req *QueryPositionFeesRequest) (*QueryPositionFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionFees not implemented")
}
func (*UnimplementedQueryServer) PositionsByPool(ctx context.Context, req *QueryPositionsByPoolRequest) (*QueryPositionsByPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsByPool not implemented")
}
func (*UnimplementedQueryServer) PositionsByAddress(ctx context.Context, req *QueryPositionsByAddressRequest) (*QueryPositionsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsByAddress not implemented")
}
func (*UnimplementedQueryServer) FeesByPositionId(ctx context.Context, req *QueryFeesByPositionIdRequest) (*QueryFeesByPositionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesByPositionId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Position_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Position(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/Position",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Position(ctx, req.(*QueryPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Positions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Positions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/Positions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Positions(ctx, req.(*QueryPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/AddressPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressPositions(ctx, req.(*QueryAddressPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/PositionFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionFees(ctx, req.(*QueryPositionFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionsByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsByPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionsByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/PositionsByPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionsByPool(ctx, req.(*QueryPositionsByPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/PositionsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionsByAddress(ctx, req.(*QueryPositionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeesByPositionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeesByPositionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesByPositionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.liquiditypool.Query/FeesByPositionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesByPositionId(ctx, req.(*QueryFeesByPositionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.liquiditypool.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "Position",
			Handler:    _Query_Position_Handler,
		},
		{
			MethodName: "Positions",
			Handler:    _Query_Positions_Handler,
		},
		{
			MethodName: "AddressPositions",
			Handler:    _Query_AddressPositions_Handler,
		},
		{
			MethodName: "PositionFees",
			Handler:    _Query_PositionFees_Handler,
		},
		{
			MethodName: "PositionsByPool",
			Handler:    _Query_PositionsByPool_Handler,
		},
		{
			MethodName: "PositionsByAddress",
			Handler:    _Query_PositionsByAddress_Handler,
		},
		{
			MethodName: "FeesByPositionId",
			Handler:    _Query_FeesByPositionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/liquiditypool/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AmountQuote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AmountBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolResponse) Marshal() (dAtA []byte, err error) {
=======
func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenQuote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.TokenBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *PositionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AmountQuote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AmountBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPositionResponse) Marshal() (dAtA []byte, err error) {
=======
func (m *QueryPositionResponse) Marshal() (dAtA []byte, err error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenQuote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.TokenBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *QueryPositionsByPoolRequest) Marshal() (dAtA []byte, err error) {
=======
func (m *QueryAddressPositionsRequest) Marshal() (dAtA []byte, err error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

<<<<<<< HEAD
func (m *QueryPositionsByPoolRequest) MarshalTo(dAtA []byte) (int, error) {
=======
func (m *QueryAddressPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

<<<<<<< HEAD
func (m *QueryPositionsByPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
=======
func (m *QueryAddressPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	i := len(dAtA)
	_ = i
	var l int
	_ = l
<<<<<<< HEAD
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionsByPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsByPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsByPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
=======
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *QueryPositionsByAddressResponse) Marshal() (dAtA []byte, err error) {
=======
func (m *QueryAddressPositionsResponse) Marshal() (dAtA []byte, err error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

<<<<<<< HEAD
func (m *QueryPositionsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
=======
func (m *QueryAddressPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

<<<<<<< HEAD
func (m *QueryPositionsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
=======
func (m *QueryAddressPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	i := len(dAtA)
	_ = i
	var l int
	_ = l
<<<<<<< HEAD
=======
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdRequest) Marshal() (dAtA []byte, err error) {
=======
func (m *QueryPositionFeesRequest) Marshal() (dAtA []byte, err error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdRequest) MarshalTo(dAtA []byte) (int, error) {
=======
func (m *QueryPositionFeesRequest) MarshalTo(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
=======
func (m *QueryPositionFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdResponse) Marshal() (dAtA []byte, err error) {
=======
func (m *QueryPositionFeesResponse) Marshal() (dAtA []byte, err error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdResponse) MarshalTo(dAtA []byte) (int, error) {
=======
func (m *QueryPositionFeesResponse) MarshalTo(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
=======
func (m *QueryPositionFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	i := len(dAtA)
	_ = i
	var l int
	_ = l
<<<<<<< HEAD
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
=======
	{
		size, err := m.FeeQuote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.FeeBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

<<<<<<< HEAD
func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AmountBase.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AmountQuote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPoolResponse) Size() (n int) {
=======
func (m *QueryPoolResponse) Size() (n int) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TokenBase.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TokenQuote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

<<<<<<< HEAD
func (m *PositionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AmountBase.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AmountQuote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPositionResponse) Size() (n int) {
=======
func (m *QueryPositionResponse) Size() (n int) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TokenBase.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TokenQuote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

<<<<<<< HEAD
func (m *QueryPositionsByPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPositionsByPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPositionsByAddressRequest) Size() (n int) {
=======
func (m *QueryAddressPositionsRequest) Size() (n int) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
<<<<<<< HEAD
	return n
}

func (m *QueryPositionsByAddressResponse) Size() (n int) {
=======
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressPositionsResponse) Size() (n int) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
<<<<<<< HEAD
	return n
}

func (m *QueryFeesByPositionIdRequest) Size() (n int) {
=======
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionFeesRequest) Size() (n int) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

<<<<<<< HEAD
func (m *QueryFeesByPositionIdResponse) Size() (n int) {
=======
func (m *QueryPositionFeesResponse) Size() (n int) {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	if m == nil {
		return 0
	}
	var l int
	_ = l
<<<<<<< HEAD
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
=======
	l = m.FeeBase.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.FeeQuote.Size()
	n += 1 + l + sovQuery(uint64(l))
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountQuote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenQuote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Pool = append(m.Pool, PoolInfo{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
=======
			m.Pools = append(m.Pools, Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *PositionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountQuote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPositionResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryPositionResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenQuote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Position = append(m.Position, PositionInfo{})
			if err := m.Position[len(m.Position)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
=======
			m.Positions = append(m.Positions, Position{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryPositionsByPoolRequest) Unmarshal(dAtA []byte) error {
=======
func (m *QueryAddressPositionsRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryPositionsByPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsByPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsByPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsByPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsByPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, PositionInfo{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryAddressPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
<<<<<<< HEAD
=======
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryPositionsByAddressResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryAddressPositionsResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryPositionsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryAddressPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Positions = append(m.Positions, PositionInfo{})
=======
			m.Positions = append(m.Positions, Position{})
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
<<<<<<< HEAD
=======
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryFeesByPositionIdRequest) Unmarshal(dAtA []byte) error {
=======
func (m *QueryPositionFeesRequest) Unmarshal(dAtA []byte) error {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryFeesByPositionIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeesByPositionIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryPositionFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *QueryFeesByPositionIdResponse) Unmarshal(dAtA []byte) error {
=======
func (m *QueryPositionFeesResponse) Unmarshal(dAtA []byte) error {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
<<<<<<< HEAD
			return fmt.Errorf("proto: QueryFeesByPositionIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeesByPositionIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
=======
			return fmt.Errorf("proto: QueryPositionFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
=======
				return fmt.Errorf("proto: wrong wireType = %d for field FeeBase", wireType)
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
<<<<<<< HEAD
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
=======
			if err := m.FeeBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeQuote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
>>>>>>> 3988f81665ee85f01cc5adb24fcb7beb3e5cb010
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
