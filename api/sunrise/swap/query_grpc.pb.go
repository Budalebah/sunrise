// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sunrise/swap/query.proto

package swap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                       = "/sunrise.swap.Query/Params"
	Query_IncomingInFlightPacket_FullMethodName       = "/sunrise.swap.Query/IncomingInFlightPacket"
	Query_IncomingInFlightPackets_FullMethodName      = "/sunrise.swap.Query/IncomingInFlightPackets"
	Query_OutgoingInFlightPacket_FullMethodName       = "/sunrise.swap.Query/OutgoingInFlightPacket"
	Query_OutgoingInFlightPackets_FullMethodName      = "/sunrise.swap.Query/OutgoingInFlightPackets"
	Query_CalculatedSwapExactAmountIn_FullMethodName  = "/sunrise.swap.Query/CalculatedSwapExactAmountIn"
	Query_CalculatedSwapExactAmountOut_FullMethodName = "/sunrise.swap.Query/CalculatedSwapExactAmountOut"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of IncomingInFlightPacket items.
	IncomingInFlightPacket(ctx context.Context, in *QueryIncomingInFlightPacketRequest, opts ...grpc.CallOption) (*QueryIncomingInFlightPacketResponse, error)
	IncomingInFlightPackets(ctx context.Context, in *QueryIncomingInFlightPacketsRequest, opts ...grpc.CallOption) (*QueryIncomingInFlightPacketsResponse, error)
	// Queries a list of OutgoingInFlightPacket items.
	OutgoingInFlightPacket(ctx context.Context, in *QueryOutgoingInFlightPacketRequest, opts ...grpc.CallOption) (*QueryOutgoingInFlightPacketResponse, error)
	OutgoingInFlightPackets(ctx context.Context, in *QueryOutgoingInFlightPacketsRequest, opts ...grpc.CallOption) (*QueryOutgoingInFlightPacketsResponse, error)
	// Queries a calculated swap value.
	CalculatedSwapExactAmountIn(ctx context.Context, in *QueryCalculatedSwapExactAmountInRequest, opts ...grpc.CallOption) (*QueryCalculatedSwapExactAmountInResponse, error)
	CalculatedSwapExactAmountOut(ctx context.Context, in *QueryCalculatedSwapExactAmountOutRequest, opts ...grpc.CallOption) (*QueryCalculatedSwapExactAmountOutResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncomingInFlightPacket(ctx context.Context, in *QueryIncomingInFlightPacketRequest, opts ...grpc.CallOption) (*QueryIncomingInFlightPacketResponse, error) {
	out := new(QueryIncomingInFlightPacketResponse)
	err := c.cc.Invoke(ctx, Query_IncomingInFlightPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncomingInFlightPackets(ctx context.Context, in *QueryIncomingInFlightPacketsRequest, opts ...grpc.CallOption) (*QueryIncomingInFlightPacketsResponse, error) {
	out := new(QueryIncomingInFlightPacketsResponse)
	err := c.cc.Invoke(ctx, Query_IncomingInFlightPackets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingInFlightPacket(ctx context.Context, in *QueryOutgoingInFlightPacketRequest, opts ...grpc.CallOption) (*QueryOutgoingInFlightPacketResponse, error) {
	out := new(QueryOutgoingInFlightPacketResponse)
	err := c.cc.Invoke(ctx, Query_OutgoingInFlightPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingInFlightPackets(ctx context.Context, in *QueryOutgoingInFlightPacketsRequest, opts ...grpc.CallOption) (*QueryOutgoingInFlightPacketsResponse, error) {
	out := new(QueryOutgoingInFlightPacketsResponse)
	err := c.cc.Invoke(ctx, Query_OutgoingInFlightPackets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculatedSwapExactAmountIn(ctx context.Context, in *QueryCalculatedSwapExactAmountInRequest, opts ...grpc.CallOption) (*QueryCalculatedSwapExactAmountInResponse, error) {
	out := new(QueryCalculatedSwapExactAmountInResponse)
	err := c.cc.Invoke(ctx, Query_CalculatedSwapExactAmountIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculatedSwapExactAmountOut(ctx context.Context, in *QueryCalculatedSwapExactAmountOutRequest, opts ...grpc.CallOption) (*QueryCalculatedSwapExactAmountOutResponse, error) {
	out := new(QueryCalculatedSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, Query_CalculatedSwapExactAmountOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of IncomingInFlightPacket items.
	IncomingInFlightPacket(context.Context, *QueryIncomingInFlightPacketRequest) (*QueryIncomingInFlightPacketResponse, error)
	IncomingInFlightPackets(context.Context, *QueryIncomingInFlightPacketsRequest) (*QueryIncomingInFlightPacketsResponse, error)
	// Queries a list of OutgoingInFlightPacket items.
	OutgoingInFlightPacket(context.Context, *QueryOutgoingInFlightPacketRequest) (*QueryOutgoingInFlightPacketResponse, error)
	OutgoingInFlightPackets(context.Context, *QueryOutgoingInFlightPacketsRequest) (*QueryOutgoingInFlightPacketsResponse, error)
	// Queries a calculated swap value.
	CalculatedSwapExactAmountIn(context.Context, *QueryCalculatedSwapExactAmountInRequest) (*QueryCalculatedSwapExactAmountInResponse, error)
	CalculatedSwapExactAmountOut(context.Context, *QueryCalculatedSwapExactAmountOutRequest) (*QueryCalculatedSwapExactAmountOutResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) IncomingInFlightPacket(context.Context, *QueryIncomingInFlightPacketRequest) (*QueryIncomingInFlightPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomingInFlightPacket not implemented")
}
func (UnimplementedQueryServer) IncomingInFlightPackets(context.Context, *QueryIncomingInFlightPacketsRequest) (*QueryIncomingInFlightPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomingInFlightPackets not implemented")
}
func (UnimplementedQueryServer) OutgoingInFlightPacket(context.Context, *QueryOutgoingInFlightPacketRequest) (*QueryOutgoingInFlightPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingInFlightPacket not implemented")
}
func (UnimplementedQueryServer) OutgoingInFlightPackets(context.Context, *QueryOutgoingInFlightPacketsRequest) (*QueryOutgoingInFlightPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingInFlightPackets not implemented")
}
func (UnimplementedQueryServer) CalculatedSwapExactAmountIn(context.Context, *QueryCalculatedSwapExactAmountInRequest) (*QueryCalculatedSwapExactAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatedSwapExactAmountIn not implemented")
}
func (UnimplementedQueryServer) CalculatedSwapExactAmountOut(context.Context, *QueryCalculatedSwapExactAmountOutRequest) (*QueryCalculatedSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatedSwapExactAmountOut not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncomingInFlightPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncomingInFlightPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncomingInFlightPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IncomingInFlightPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncomingInFlightPacket(ctx, req.(*QueryIncomingInFlightPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncomingInFlightPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncomingInFlightPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncomingInFlightPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IncomingInFlightPackets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncomingInFlightPackets(ctx, req.(*QueryIncomingInFlightPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingInFlightPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingInFlightPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingInFlightPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutgoingInFlightPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingInFlightPacket(ctx, req.(*QueryOutgoingInFlightPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingInFlightPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingInFlightPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingInFlightPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutgoingInFlightPackets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingInFlightPackets(ctx, req.(*QueryOutgoingInFlightPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculatedSwapExactAmountIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculatedSwapExactAmountInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculatedSwapExactAmountIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CalculatedSwapExactAmountIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculatedSwapExactAmountIn(ctx, req.(*QueryCalculatedSwapExactAmountInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculatedSwapExactAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculatedSwapExactAmountOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculatedSwapExactAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CalculatedSwapExactAmountOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculatedSwapExactAmountOut(ctx, req.(*QueryCalculatedSwapExactAmountOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.swap.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "IncomingInFlightPacket",
			Handler:    _Query_IncomingInFlightPacket_Handler,
		},
		{
			MethodName: "IncomingInFlightPackets",
			Handler:    _Query_IncomingInFlightPackets_Handler,
		},
		{
			MethodName: "OutgoingInFlightPacket",
			Handler:    _Query_OutgoingInFlightPacket_Handler,
		},
		{
			MethodName: "OutgoingInFlightPackets",
			Handler:    _Query_OutgoingInFlightPackets_Handler,
		},
		{
			MethodName: "CalculatedSwapExactAmountIn",
			Handler:    _Query_CalculatedSwapExactAmountIn_Handler,
		},
		{
			MethodName: "CalculatedSwapExactAmountOut",
			Handler:    _Query_CalculatedSwapExactAmountOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/swap/query.proto",
}
