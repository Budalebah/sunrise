// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package liquidstaking

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_WhitelistedValidator                   protoreflect.MessageDescriptor
	fd_WhitelistedValidator_validator_address protoreflect.FieldDescriptor
	fd_WhitelistedValidator_target_weight     protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_liquidstaking_liquidstaking_proto_init()
	md_WhitelistedValidator = File_sunrise_liquidstaking_liquidstaking_proto.Messages().ByName("WhitelistedValidator")
	fd_WhitelistedValidator_validator_address = md_WhitelistedValidator.Fields().ByName("validator_address")
	fd_WhitelistedValidator_target_weight = md_WhitelistedValidator.Fields().ByName("target_weight")
}

var _ protoreflect.Message = (*fastReflection_WhitelistedValidator)(nil)

type fastReflection_WhitelistedValidator WhitelistedValidator

func (x *WhitelistedValidator) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WhitelistedValidator)(x)
}

func (x *WhitelistedValidator) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WhitelistedValidator_messageType fastReflection_WhitelistedValidator_messageType
var _ protoreflect.MessageType = fastReflection_WhitelistedValidator_messageType{}

type fastReflection_WhitelistedValidator_messageType struct{}

func (x fastReflection_WhitelistedValidator_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WhitelistedValidator)(nil)
}
func (x fastReflection_WhitelistedValidator_messageType) New() protoreflect.Message {
	return new(fastReflection_WhitelistedValidator)
}
func (x fastReflection_WhitelistedValidator_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WhitelistedValidator
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WhitelistedValidator) Descriptor() protoreflect.MessageDescriptor {
	return md_WhitelistedValidator
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WhitelistedValidator) Type() protoreflect.MessageType {
	return _fastReflection_WhitelistedValidator_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WhitelistedValidator) New() protoreflect.Message {
	return new(fastReflection_WhitelistedValidator)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WhitelistedValidator) Interface() protoreflect.ProtoMessage {
	return (*WhitelistedValidator)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WhitelistedValidator) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ValidatorAddress != "" {
		value := protoreflect.ValueOfString(x.ValidatorAddress)
		if !f(fd_WhitelistedValidator_validator_address, value) {
			return
		}
	}
	if x.TargetWeight != "" {
		value := protoreflect.ValueOfString(x.TargetWeight)
		if !f(fd_WhitelistedValidator_target_weight, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WhitelistedValidator) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.liquidstaking.WhitelistedValidator.validator_address":
		return x.ValidatorAddress != ""
	case "sunrise.liquidstaking.WhitelistedValidator.target_weight":
		return x.TargetWeight != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.WhitelistedValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.WhitelistedValidator does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhitelistedValidator) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.WhitelistedValidator.validator_address":
		x.ValidatorAddress = ""
	case "sunrise.liquidstaking.WhitelistedValidator.target_weight":
		x.TargetWeight = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.WhitelistedValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.WhitelistedValidator does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WhitelistedValidator) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.liquidstaking.WhitelistedValidator.validator_address":
		value := x.ValidatorAddress
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.WhitelistedValidator.target_weight":
		value := x.TargetWeight
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.WhitelistedValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.WhitelistedValidator does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhitelistedValidator) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.WhitelistedValidator.validator_address":
		x.ValidatorAddress = value.Interface().(string)
	case "sunrise.liquidstaking.WhitelistedValidator.target_weight":
		x.TargetWeight = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.WhitelistedValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.WhitelistedValidator does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhitelistedValidator) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.WhitelistedValidator.validator_address":
		panic(fmt.Errorf("field validator_address of message sunrise.liquidstaking.WhitelistedValidator is not mutable"))
	case "sunrise.liquidstaking.WhitelistedValidator.target_weight":
		panic(fmt.Errorf("field target_weight of message sunrise.liquidstaking.WhitelistedValidator is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.WhitelistedValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.WhitelistedValidator does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WhitelistedValidator) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.WhitelistedValidator.validator_address":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.WhitelistedValidator.target_weight":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.WhitelistedValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.WhitelistedValidator does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WhitelistedValidator) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.liquidstaking.WhitelistedValidator", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WhitelistedValidator) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhitelistedValidator) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WhitelistedValidator) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WhitelistedValidator) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WhitelistedValidator)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ValidatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetWeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WhitelistedValidator)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TargetWeight) > 0 {
			i -= len(x.TargetWeight)
			copy(dAtA[i:], x.TargetWeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetWeight)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ValidatorAddress) > 0 {
			i -= len(x.ValidatorAddress)
			copy(dAtA[i:], x.ValidatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WhitelistedValidator)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WhitelistedValidator: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WhitelistedValidator: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetWeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetWeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LiquidValidator                  protoreflect.MessageDescriptor
	fd_LiquidValidator_operator_address protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_liquidstaking_liquidstaking_proto_init()
	md_LiquidValidator = File_sunrise_liquidstaking_liquidstaking_proto.Messages().ByName("LiquidValidator")
	fd_LiquidValidator_operator_address = md_LiquidValidator.Fields().ByName("operator_address")
}

var _ protoreflect.Message = (*fastReflection_LiquidValidator)(nil)

type fastReflection_LiquidValidator LiquidValidator

func (x *LiquidValidator) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LiquidValidator)(x)
}

func (x *LiquidValidator) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LiquidValidator_messageType fastReflection_LiquidValidator_messageType
var _ protoreflect.MessageType = fastReflection_LiquidValidator_messageType{}

type fastReflection_LiquidValidator_messageType struct{}

func (x fastReflection_LiquidValidator_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LiquidValidator)(nil)
}
func (x fastReflection_LiquidValidator_messageType) New() protoreflect.Message {
	return new(fastReflection_LiquidValidator)
}
func (x fastReflection_LiquidValidator_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidValidator
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LiquidValidator) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidValidator
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LiquidValidator) Type() protoreflect.MessageType {
	return _fastReflection_LiquidValidator_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LiquidValidator) New() protoreflect.Message {
	return new(fastReflection_LiquidValidator)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LiquidValidator) Interface() protoreflect.ProtoMessage {
	return (*LiquidValidator)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LiquidValidator) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OperatorAddress != "" {
		value := protoreflect.ValueOfString(x.OperatorAddress)
		if !f(fd_LiquidValidator_operator_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LiquidValidator) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidator.operator_address":
		return x.OperatorAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidator does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidator) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidator.operator_address":
		x.OperatorAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidator does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LiquidValidator) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.liquidstaking.LiquidValidator.operator_address":
		value := x.OperatorAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidator does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidator) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidator.operator_address":
		x.OperatorAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidator does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidator) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidator.operator_address":
		panic(fmt.Errorf("field operator_address of message sunrise.liquidstaking.LiquidValidator is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidator does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LiquidValidator) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidator.operator_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidator"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidator does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LiquidValidator) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.liquidstaking.LiquidValidator", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LiquidValidator) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidator) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LiquidValidator) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LiquidValidator) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LiquidValidator)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OperatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LiquidValidator)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.OperatorAddress) > 0 {
			i -= len(x.OperatorAddress)
			copy(dAtA[i:], x.OperatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OperatorAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LiquidValidator)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidValidator: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidValidator: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OperatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LiquidValidatorState                  protoreflect.MessageDescriptor
	fd_LiquidValidatorState_operator_address protoreflect.FieldDescriptor
	fd_LiquidValidatorState_weight           protoreflect.FieldDescriptor
	fd_LiquidValidatorState_status           protoreflect.FieldDescriptor
	fd_LiquidValidatorState_del_shares       protoreflect.FieldDescriptor
	fd_LiquidValidatorState_liquid_tokens    protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_liquidstaking_liquidstaking_proto_init()
	md_LiquidValidatorState = File_sunrise_liquidstaking_liquidstaking_proto.Messages().ByName("LiquidValidatorState")
	fd_LiquidValidatorState_operator_address = md_LiquidValidatorState.Fields().ByName("operator_address")
	fd_LiquidValidatorState_weight = md_LiquidValidatorState.Fields().ByName("weight")
	fd_LiquidValidatorState_status = md_LiquidValidatorState.Fields().ByName("status")
	fd_LiquidValidatorState_del_shares = md_LiquidValidatorState.Fields().ByName("del_shares")
	fd_LiquidValidatorState_liquid_tokens = md_LiquidValidatorState.Fields().ByName("liquid_tokens")
}

var _ protoreflect.Message = (*fastReflection_LiquidValidatorState)(nil)

type fastReflection_LiquidValidatorState LiquidValidatorState

func (x *LiquidValidatorState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LiquidValidatorState)(x)
}

func (x *LiquidValidatorState) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LiquidValidatorState_messageType fastReflection_LiquidValidatorState_messageType
var _ protoreflect.MessageType = fastReflection_LiquidValidatorState_messageType{}

type fastReflection_LiquidValidatorState_messageType struct{}

func (x fastReflection_LiquidValidatorState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LiquidValidatorState)(nil)
}
func (x fastReflection_LiquidValidatorState_messageType) New() protoreflect.Message {
	return new(fastReflection_LiquidValidatorState)
}
func (x fastReflection_LiquidValidatorState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidValidatorState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LiquidValidatorState) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidValidatorState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LiquidValidatorState) Type() protoreflect.MessageType {
	return _fastReflection_LiquidValidatorState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LiquidValidatorState) New() protoreflect.Message {
	return new(fastReflection_LiquidValidatorState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LiquidValidatorState) Interface() protoreflect.ProtoMessage {
	return (*LiquidValidatorState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LiquidValidatorState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OperatorAddress != "" {
		value := protoreflect.ValueOfString(x.OperatorAddress)
		if !f(fd_LiquidValidatorState_operator_address, value) {
			return
		}
	}
	if x.Weight != "" {
		value := protoreflect.ValueOfString(x.Weight)
		if !f(fd_LiquidValidatorState_weight, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_LiquidValidatorState_status, value) {
			return
		}
	}
	if x.DelShares != "" {
		value := protoreflect.ValueOfString(x.DelShares)
		if !f(fd_LiquidValidatorState_del_shares, value) {
			return
		}
	}
	if x.LiquidTokens != "" {
		value := protoreflect.ValueOfString(x.LiquidTokens)
		if !f(fd_LiquidValidatorState_liquid_tokens, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LiquidValidatorState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidatorState.operator_address":
		return x.OperatorAddress != ""
	case "sunrise.liquidstaking.LiquidValidatorState.weight":
		return x.Weight != ""
	case "sunrise.liquidstaking.LiquidValidatorState.status":
		return x.Status != 0
	case "sunrise.liquidstaking.LiquidValidatorState.del_shares":
		return x.DelShares != ""
	case "sunrise.liquidstaking.LiquidValidatorState.liquid_tokens":
		return x.LiquidTokens != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidatorState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidatorState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidatorState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidatorState.operator_address":
		x.OperatorAddress = ""
	case "sunrise.liquidstaking.LiquidValidatorState.weight":
		x.Weight = ""
	case "sunrise.liquidstaking.LiquidValidatorState.status":
		x.Status = 0
	case "sunrise.liquidstaking.LiquidValidatorState.del_shares":
		x.DelShares = ""
	case "sunrise.liquidstaking.LiquidValidatorState.liquid_tokens":
		x.LiquidTokens = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidatorState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidatorState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LiquidValidatorState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.liquidstaking.LiquidValidatorState.operator_address":
		value := x.OperatorAddress
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.LiquidValidatorState.weight":
		value := x.Weight
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.LiquidValidatorState.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sunrise.liquidstaking.LiquidValidatorState.del_shares":
		value := x.DelShares
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.LiquidValidatorState.liquid_tokens":
		value := x.LiquidTokens
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidatorState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidatorState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidatorState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidatorState.operator_address":
		x.OperatorAddress = value.Interface().(string)
	case "sunrise.liquidstaking.LiquidValidatorState.weight":
		x.Weight = value.Interface().(string)
	case "sunrise.liquidstaking.LiquidValidatorState.status":
		x.Status = (ValidatorStatus)(value.Enum())
	case "sunrise.liquidstaking.LiquidValidatorState.del_shares":
		x.DelShares = value.Interface().(string)
	case "sunrise.liquidstaking.LiquidValidatorState.liquid_tokens":
		x.LiquidTokens = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidatorState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidatorState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidatorState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidatorState.operator_address":
		panic(fmt.Errorf("field operator_address of message sunrise.liquidstaking.LiquidValidatorState is not mutable"))
	case "sunrise.liquidstaking.LiquidValidatorState.weight":
		panic(fmt.Errorf("field weight of message sunrise.liquidstaking.LiquidValidatorState is not mutable"))
	case "sunrise.liquidstaking.LiquidValidatorState.status":
		panic(fmt.Errorf("field status of message sunrise.liquidstaking.LiquidValidatorState is not mutable"))
	case "sunrise.liquidstaking.LiquidValidatorState.del_shares":
		panic(fmt.Errorf("field del_shares of message sunrise.liquidstaking.LiquidValidatorState is not mutable"))
	case "sunrise.liquidstaking.LiquidValidatorState.liquid_tokens":
		panic(fmt.Errorf("field liquid_tokens of message sunrise.liquidstaking.LiquidValidatorState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidatorState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidatorState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LiquidValidatorState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.LiquidValidatorState.operator_address":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.LiquidValidatorState.weight":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.LiquidValidatorState.status":
		return protoreflect.ValueOfEnum(0)
	case "sunrise.liquidstaking.LiquidValidatorState.del_shares":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.LiquidValidatorState.liquid_tokens":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.LiquidValidatorState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.LiquidValidatorState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LiquidValidatorState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.liquidstaking.LiquidValidatorState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LiquidValidatorState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidValidatorState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LiquidValidatorState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LiquidValidatorState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LiquidValidatorState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OperatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Weight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.DelShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LiquidTokens)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LiquidValidatorState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.LiquidTokens) > 0 {
			i -= len(x.LiquidTokens)
			copy(dAtA[i:], x.LiquidTokens)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LiquidTokens)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DelShares) > 0 {
			i -= len(x.DelShares)
			copy(dAtA[i:], x.DelShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DelShares)))
			i--
			dAtA[i] = 0x22
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Weight) > 0 {
			i -= len(x.Weight)
			copy(dAtA[i:], x.Weight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Weight)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OperatorAddress) > 0 {
			i -= len(x.OperatorAddress)
			copy(dAtA[i:], x.OperatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OperatorAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LiquidValidatorState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidValidatorState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidValidatorState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OperatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Weight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= ValidatorStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiquidTokens", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiquidTokens = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NetAmountState                         protoreflect.MessageDescriptor
	fd_NetAmountState_mint_rate               protoreflect.FieldDescriptor
	fd_NetAmountState_btoken_total_supply     protoreflect.FieldDescriptor
	fd_NetAmountState_net_amount              protoreflect.FieldDescriptor
	fd_NetAmountState_total_del_shares        protoreflect.FieldDescriptor
	fd_NetAmountState_total_liquid_tokens     protoreflect.FieldDescriptor
	fd_NetAmountState_total_remaining_rewards protoreflect.FieldDescriptor
	fd_NetAmountState_total_unbonding_balance protoreflect.FieldDescriptor
	fd_NetAmountState_proxy_acc_balance       protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_liquidstaking_liquidstaking_proto_init()
	md_NetAmountState = File_sunrise_liquidstaking_liquidstaking_proto.Messages().ByName("NetAmountState")
	fd_NetAmountState_mint_rate = md_NetAmountState.Fields().ByName("mint_rate")
	fd_NetAmountState_btoken_total_supply = md_NetAmountState.Fields().ByName("btoken_total_supply")
	fd_NetAmountState_net_amount = md_NetAmountState.Fields().ByName("net_amount")
	fd_NetAmountState_total_del_shares = md_NetAmountState.Fields().ByName("total_del_shares")
	fd_NetAmountState_total_liquid_tokens = md_NetAmountState.Fields().ByName("total_liquid_tokens")
	fd_NetAmountState_total_remaining_rewards = md_NetAmountState.Fields().ByName("total_remaining_rewards")
	fd_NetAmountState_total_unbonding_balance = md_NetAmountState.Fields().ByName("total_unbonding_balance")
	fd_NetAmountState_proxy_acc_balance = md_NetAmountState.Fields().ByName("proxy_acc_balance")
}

var _ protoreflect.Message = (*fastReflection_NetAmountState)(nil)

type fastReflection_NetAmountState NetAmountState

func (x *NetAmountState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NetAmountState)(x)
}

func (x *NetAmountState) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NetAmountState_messageType fastReflection_NetAmountState_messageType
var _ protoreflect.MessageType = fastReflection_NetAmountState_messageType{}

type fastReflection_NetAmountState_messageType struct{}

func (x fastReflection_NetAmountState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NetAmountState)(nil)
}
func (x fastReflection_NetAmountState_messageType) New() protoreflect.Message {
	return new(fastReflection_NetAmountState)
}
func (x fastReflection_NetAmountState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NetAmountState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NetAmountState) Descriptor() protoreflect.MessageDescriptor {
	return md_NetAmountState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NetAmountState) Type() protoreflect.MessageType {
	return _fastReflection_NetAmountState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NetAmountState) New() protoreflect.Message {
	return new(fastReflection_NetAmountState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NetAmountState) Interface() protoreflect.ProtoMessage {
	return (*NetAmountState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NetAmountState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MintRate != "" {
		value := protoreflect.ValueOfString(x.MintRate)
		if !f(fd_NetAmountState_mint_rate, value) {
			return
		}
	}
	if x.BtokenTotalSupply != "" {
		value := protoreflect.ValueOfString(x.BtokenTotalSupply)
		if !f(fd_NetAmountState_btoken_total_supply, value) {
			return
		}
	}
	if x.NetAmount != "" {
		value := protoreflect.ValueOfString(x.NetAmount)
		if !f(fd_NetAmountState_net_amount, value) {
			return
		}
	}
	if x.TotalDelShares != "" {
		value := protoreflect.ValueOfString(x.TotalDelShares)
		if !f(fd_NetAmountState_total_del_shares, value) {
			return
		}
	}
	if x.TotalLiquidTokens != "" {
		value := protoreflect.ValueOfString(x.TotalLiquidTokens)
		if !f(fd_NetAmountState_total_liquid_tokens, value) {
			return
		}
	}
	if x.TotalRemainingRewards != "" {
		value := protoreflect.ValueOfString(x.TotalRemainingRewards)
		if !f(fd_NetAmountState_total_remaining_rewards, value) {
			return
		}
	}
	if x.TotalUnbondingBalance != "" {
		value := protoreflect.ValueOfString(x.TotalUnbondingBalance)
		if !f(fd_NetAmountState_total_unbonding_balance, value) {
			return
		}
	}
	if x.ProxyAccBalance != "" {
		value := protoreflect.ValueOfString(x.ProxyAccBalance)
		if !f(fd_NetAmountState_proxy_acc_balance, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NetAmountState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.liquidstaking.NetAmountState.mint_rate":
		return x.MintRate != ""
	case "sunrise.liquidstaking.NetAmountState.btoken_total_supply":
		return x.BtokenTotalSupply != ""
	case "sunrise.liquidstaking.NetAmountState.net_amount":
		return x.NetAmount != ""
	case "sunrise.liquidstaking.NetAmountState.total_del_shares":
		return x.TotalDelShares != ""
	case "sunrise.liquidstaking.NetAmountState.total_liquid_tokens":
		return x.TotalLiquidTokens != ""
	case "sunrise.liquidstaking.NetAmountState.total_remaining_rewards":
		return x.TotalRemainingRewards != ""
	case "sunrise.liquidstaking.NetAmountState.total_unbonding_balance":
		return x.TotalUnbondingBalance != ""
	case "sunrise.liquidstaking.NetAmountState.proxy_acc_balance":
		return x.ProxyAccBalance != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.NetAmountState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.NetAmountState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NetAmountState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.NetAmountState.mint_rate":
		x.MintRate = ""
	case "sunrise.liquidstaking.NetAmountState.btoken_total_supply":
		x.BtokenTotalSupply = ""
	case "sunrise.liquidstaking.NetAmountState.net_amount":
		x.NetAmount = ""
	case "sunrise.liquidstaking.NetAmountState.total_del_shares":
		x.TotalDelShares = ""
	case "sunrise.liquidstaking.NetAmountState.total_liquid_tokens":
		x.TotalLiquidTokens = ""
	case "sunrise.liquidstaking.NetAmountState.total_remaining_rewards":
		x.TotalRemainingRewards = ""
	case "sunrise.liquidstaking.NetAmountState.total_unbonding_balance":
		x.TotalUnbondingBalance = ""
	case "sunrise.liquidstaking.NetAmountState.proxy_acc_balance":
		x.ProxyAccBalance = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.NetAmountState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.NetAmountState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NetAmountState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.liquidstaking.NetAmountState.mint_rate":
		value := x.MintRate
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.btoken_total_supply":
		value := x.BtokenTotalSupply
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.net_amount":
		value := x.NetAmount
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.total_del_shares":
		value := x.TotalDelShares
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.total_liquid_tokens":
		value := x.TotalLiquidTokens
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.total_remaining_rewards":
		value := x.TotalRemainingRewards
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.total_unbonding_balance":
		value := x.TotalUnbondingBalance
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.NetAmountState.proxy_acc_balance":
		value := x.ProxyAccBalance
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.NetAmountState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.NetAmountState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NetAmountState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.NetAmountState.mint_rate":
		x.MintRate = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.btoken_total_supply":
		x.BtokenTotalSupply = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.net_amount":
		x.NetAmount = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.total_del_shares":
		x.TotalDelShares = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.total_liquid_tokens":
		x.TotalLiquidTokens = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.total_remaining_rewards":
		x.TotalRemainingRewards = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.total_unbonding_balance":
		x.TotalUnbondingBalance = value.Interface().(string)
	case "sunrise.liquidstaking.NetAmountState.proxy_acc_balance":
		x.ProxyAccBalance = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.NetAmountState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.NetAmountState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NetAmountState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.NetAmountState.mint_rate":
		panic(fmt.Errorf("field mint_rate of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.btoken_total_supply":
		panic(fmt.Errorf("field btoken_total_supply of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.net_amount":
		panic(fmt.Errorf("field net_amount of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.total_del_shares":
		panic(fmt.Errorf("field total_del_shares of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.total_liquid_tokens":
		panic(fmt.Errorf("field total_liquid_tokens of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.total_remaining_rewards":
		panic(fmt.Errorf("field total_remaining_rewards of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.total_unbonding_balance":
		panic(fmt.Errorf("field total_unbonding_balance of message sunrise.liquidstaking.NetAmountState is not mutable"))
	case "sunrise.liquidstaking.NetAmountState.proxy_acc_balance":
		panic(fmt.Errorf("field proxy_acc_balance of message sunrise.liquidstaking.NetAmountState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.NetAmountState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.NetAmountState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NetAmountState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.NetAmountState.mint_rate":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.btoken_total_supply":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.net_amount":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.total_del_shares":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.total_liquid_tokens":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.total_remaining_rewards":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.total_unbonding_balance":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.NetAmountState.proxy_acc_balance":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.NetAmountState"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.NetAmountState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NetAmountState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.liquidstaking.NetAmountState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NetAmountState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NetAmountState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NetAmountState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NetAmountState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NetAmountState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MintRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BtokenTotalSupply)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NetAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalDelShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalLiquidTokens)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalRemainingRewards)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalUnbondingBalance)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProxyAccBalance)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NetAmountState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ProxyAccBalance) > 0 {
			i -= len(x.ProxyAccBalance)
			copy(dAtA[i:], x.ProxyAccBalance)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProxyAccBalance)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.TotalUnbondingBalance) > 0 {
			i -= len(x.TotalUnbondingBalance)
			copy(dAtA[i:], x.TotalUnbondingBalance)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalUnbondingBalance)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.TotalRemainingRewards) > 0 {
			i -= len(x.TotalRemainingRewards)
			copy(dAtA[i:], x.TotalRemainingRewards)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalRemainingRewards)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.TotalLiquidTokens) > 0 {
			i -= len(x.TotalLiquidTokens)
			copy(dAtA[i:], x.TotalLiquidTokens)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalLiquidTokens)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TotalDelShares) > 0 {
			i -= len(x.TotalDelShares)
			copy(dAtA[i:], x.TotalDelShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalDelShares)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.NetAmount) > 0 {
			i -= len(x.NetAmount)
			copy(dAtA[i:], x.NetAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NetAmount)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.BtokenTotalSupply) > 0 {
			i -= len(x.BtokenTotalSupply)
			copy(dAtA[i:], x.BtokenTotalSupply)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BtokenTotalSupply)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.MintRate) > 0 {
			i -= len(x.MintRate)
			copy(dAtA[i:], x.MintRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintRate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NetAmountState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NetAmountState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NetAmountState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtokenTotalSupply", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BtokenTotalSupply = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NetAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NetAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalDelShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalDelShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidTokens", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalLiquidTokens = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalRemainingRewards", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalRemainingRewards = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondingBalance", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalUnbondingBalance = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProxyAccBalance", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProxyAccBalance = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VotingPower                             protoreflect.MessageDescriptor
	fd_VotingPower_voter                       protoreflect.FieldDescriptor
	fd_VotingPower_staking_voting_power        protoreflect.FieldDescriptor
	fd_VotingPower_liquid_staking_voting_power protoreflect.FieldDescriptor
	fd_VotingPower_validator_voting_power      protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_liquidstaking_liquidstaking_proto_init()
	md_VotingPower = File_sunrise_liquidstaking_liquidstaking_proto.Messages().ByName("VotingPower")
	fd_VotingPower_voter = md_VotingPower.Fields().ByName("voter")
	fd_VotingPower_staking_voting_power = md_VotingPower.Fields().ByName("staking_voting_power")
	fd_VotingPower_liquid_staking_voting_power = md_VotingPower.Fields().ByName("liquid_staking_voting_power")
	fd_VotingPower_validator_voting_power = md_VotingPower.Fields().ByName("validator_voting_power")
}

var _ protoreflect.Message = (*fastReflection_VotingPower)(nil)

type fastReflection_VotingPower VotingPower

func (x *VotingPower) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VotingPower)(x)
}

func (x *VotingPower) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VotingPower_messageType fastReflection_VotingPower_messageType
var _ protoreflect.MessageType = fastReflection_VotingPower_messageType{}

type fastReflection_VotingPower_messageType struct{}

func (x fastReflection_VotingPower_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VotingPower)(nil)
}
func (x fastReflection_VotingPower_messageType) New() protoreflect.Message {
	return new(fastReflection_VotingPower)
}
func (x fastReflection_VotingPower_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VotingPower
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VotingPower) Descriptor() protoreflect.MessageDescriptor {
	return md_VotingPower
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VotingPower) Type() protoreflect.MessageType {
	return _fastReflection_VotingPower_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VotingPower) New() protoreflect.Message {
	return new(fastReflection_VotingPower)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VotingPower) Interface() protoreflect.ProtoMessage {
	return (*VotingPower)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VotingPower) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Voter != "" {
		value := protoreflect.ValueOfString(x.Voter)
		if !f(fd_VotingPower_voter, value) {
			return
		}
	}
	if x.StakingVotingPower != "" {
		value := protoreflect.ValueOfString(x.StakingVotingPower)
		if !f(fd_VotingPower_staking_voting_power, value) {
			return
		}
	}
	if x.LiquidStakingVotingPower != "" {
		value := protoreflect.ValueOfString(x.LiquidStakingVotingPower)
		if !f(fd_VotingPower_liquid_staking_voting_power, value) {
			return
		}
	}
	if x.ValidatorVotingPower != "" {
		value := protoreflect.ValueOfString(x.ValidatorVotingPower)
		if !f(fd_VotingPower_validator_voting_power, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VotingPower) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.liquidstaking.VotingPower.voter":
		return x.Voter != ""
	case "sunrise.liquidstaking.VotingPower.staking_voting_power":
		return x.StakingVotingPower != ""
	case "sunrise.liquidstaking.VotingPower.liquid_staking_voting_power":
		return x.LiquidStakingVotingPower != ""
	case "sunrise.liquidstaking.VotingPower.validator_voting_power":
		return x.ValidatorVotingPower != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.VotingPower"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.VotingPower does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VotingPower) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.VotingPower.voter":
		x.Voter = ""
	case "sunrise.liquidstaking.VotingPower.staking_voting_power":
		x.StakingVotingPower = ""
	case "sunrise.liquidstaking.VotingPower.liquid_staking_voting_power":
		x.LiquidStakingVotingPower = ""
	case "sunrise.liquidstaking.VotingPower.validator_voting_power":
		x.ValidatorVotingPower = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.VotingPower"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.VotingPower does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VotingPower) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.liquidstaking.VotingPower.voter":
		value := x.Voter
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.VotingPower.staking_voting_power":
		value := x.StakingVotingPower
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.VotingPower.liquid_staking_voting_power":
		value := x.LiquidStakingVotingPower
		return protoreflect.ValueOfString(value)
	case "sunrise.liquidstaking.VotingPower.validator_voting_power":
		value := x.ValidatorVotingPower
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.VotingPower"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.VotingPower does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VotingPower) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.liquidstaking.VotingPower.voter":
		x.Voter = value.Interface().(string)
	case "sunrise.liquidstaking.VotingPower.staking_voting_power":
		x.StakingVotingPower = value.Interface().(string)
	case "sunrise.liquidstaking.VotingPower.liquid_staking_voting_power":
		x.LiquidStakingVotingPower = value.Interface().(string)
	case "sunrise.liquidstaking.VotingPower.validator_voting_power":
		x.ValidatorVotingPower = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.VotingPower"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.VotingPower does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VotingPower) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.VotingPower.voter":
		panic(fmt.Errorf("field voter of message sunrise.liquidstaking.VotingPower is not mutable"))
	case "sunrise.liquidstaking.VotingPower.staking_voting_power":
		panic(fmt.Errorf("field staking_voting_power of message sunrise.liquidstaking.VotingPower is not mutable"))
	case "sunrise.liquidstaking.VotingPower.liquid_staking_voting_power":
		panic(fmt.Errorf("field liquid_staking_voting_power of message sunrise.liquidstaking.VotingPower is not mutable"))
	case "sunrise.liquidstaking.VotingPower.validator_voting_power":
		panic(fmt.Errorf("field validator_voting_power of message sunrise.liquidstaking.VotingPower is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.VotingPower"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.VotingPower does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VotingPower) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.liquidstaking.VotingPower.voter":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.VotingPower.staking_voting_power":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.VotingPower.liquid_staking_voting_power":
		return protoreflect.ValueOfString("")
	case "sunrise.liquidstaking.VotingPower.validator_voting_power":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.liquidstaking.VotingPower"))
		}
		panic(fmt.Errorf("message sunrise.liquidstaking.VotingPower does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VotingPower) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.liquidstaking.VotingPower", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VotingPower) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VotingPower) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VotingPower) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VotingPower) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VotingPower)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Voter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StakingVotingPower)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LiquidStakingVotingPower)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ValidatorVotingPower)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VotingPower)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ValidatorVotingPower) > 0 {
			i -= len(x.ValidatorVotingPower)
			copy(dAtA[i:], x.ValidatorVotingPower)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorVotingPower)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.LiquidStakingVotingPower) > 0 {
			i -= len(x.LiquidStakingVotingPower)
			copy(dAtA[i:], x.LiquidStakingVotingPower)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LiquidStakingVotingPower)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.StakingVotingPower) > 0 {
			i -= len(x.StakingVotingPower)
			copy(dAtA[i:], x.StakingVotingPower)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingVotingPower)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Voter) > 0 {
			i -= len(x.Voter)
			copy(dAtA[i:], x.Voter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Voter)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VotingPower)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VotingPower: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VotingPower: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Voter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingVotingPower", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingVotingPower = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiquidStakingVotingPower", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiquidStakingVotingPower = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorVotingPower", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorVotingPower = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sunrise/liquidstaking/liquidstaking.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValidatorStatus enumerates the status of a liquid validator.
type ValidatorStatus int32

const (
	// VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
	ValidatorStatus_VALIDATOR_STATUS_UNSPECIFIED ValidatorStatus = 0
	// VALIDATOR_STATUS_ACTIVE defines the active, valid status
	ValidatorStatus_VALIDATOR_STATUS_ACTIVE ValidatorStatus = 1
	// VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
	ValidatorStatus_VALIDATOR_STATUS_INACTIVE ValidatorStatus = 2
)

// Enum value maps for ValidatorStatus.
var (
	ValidatorStatus_name = map[int32]string{
		0: "VALIDATOR_STATUS_UNSPECIFIED",
		1: "VALIDATOR_STATUS_ACTIVE",
		2: "VALIDATOR_STATUS_INACTIVE",
	}
	ValidatorStatus_value = map[string]int32{
		"VALIDATOR_STATUS_UNSPECIFIED": 0,
		"VALIDATOR_STATUS_ACTIVE":      1,
		"VALIDATOR_STATUS_INACTIVE":    2,
	}
)

func (x ValidatorStatus) Enum() *ValidatorStatus {
	p := new(ValidatorStatus)
	*p = x
	return p
}

func (x ValidatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sunrise_liquidstaking_liquidstaking_proto_enumTypes[0].Descriptor()
}

func (ValidatorStatus) Type() protoreflect.EnumType {
	return &file_sunrise_liquidstaking_liquidstaking_proto_enumTypes[0]
}

func (x ValidatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorStatus.Descriptor instead.
func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP(), []int{0}
}

// WhitelistedValidator consists of the validator operator address and the target weight, which is a value for
// calculating the real weight to be derived according to the active status. In the case of inactive, it is calculated
// as zero.
type WhitelistedValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// validator_address defines the bech32-encoded address that whitelisted validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
	// the real weight to be derived according to the active status
	TargetWeight string `protobuf:"bytes,2,opt,name=target_weight,json=targetWeight,proto3" json:"target_weight,omitempty"`
}

func (x *WhitelistedValidator) Reset() {
	*x = WhitelistedValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistedValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistedValidator) ProtoMessage() {}

// Deprecated: Use WhitelistedValidator.ProtoReflect.Descriptor instead.
func (*WhitelistedValidator) Descriptor() ([]byte, []int) {
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP(), []int{0}
}

func (x *WhitelistedValidator) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *WhitelistedValidator) GetTargetWeight() string {
	if x != nil {
		return x.TargetWeight
	}
	return ""
}

// LiquidValidator defines a Validator that can be the target of LiquidStaking and LiquidUnstaking, Active, Weight, etc.
// fields are derived as functions to deal with by maintaining consistency with the state of the staking module.
type LiquidValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (x *LiquidValidator) Reset() {
	*x = LiquidValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidValidator) ProtoMessage() {}

// Deprecated: Use LiquidValidator.ProtoReflect.Descriptor instead.
func (*LiquidValidator) Descriptor() ([]byte, []int) {
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP(), []int{1}
}

func (x *LiquidValidator) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

// LiquidValidatorState is type LiquidValidator with state added to return to query results.
type LiquidValidatorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// weight specifies the weight for liquid staking, unstaking amount
	Weight string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// status is the liquid validator status
	Status ValidatorStatus `protobuf:"varint,3,opt,name=status,proto3,enum=sunrise.liquidstaking.ValidatorStatus" json:"status,omitempty"`
	// del_shares define the delegation shares of the validator
	DelShares string `protobuf:"bytes,4,opt,name=del_shares,json=delShares,proto3" json:"del_shares,omitempty"`
	// liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
	LiquidTokens string `protobuf:"bytes,5,opt,name=liquid_tokens,json=liquidTokens,proto3" json:"liquid_tokens,omitempty"`
}

func (x *LiquidValidatorState) Reset() {
	*x = LiquidValidatorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidValidatorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidValidatorState) ProtoMessage() {}

// Deprecated: Use LiquidValidatorState.ProtoReflect.Descriptor instead.
func (*LiquidValidatorState) Descriptor() ([]byte, []int) {
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP(), []int{2}
}

func (x *LiquidValidatorState) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *LiquidValidatorState) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *LiquidValidatorState) GetStatus() ValidatorStatus {
	if x != nil {
		return x.Status
	}
	return ValidatorStatus_VALIDATOR_STATUS_UNSPECIFIED
}

func (x *LiquidValidatorState) GetDelShares() string {
	if x != nil {
		return x.DelShares
	}
	return ""
}

func (x *LiquidValidatorState) GetLiquidTokens() string {
	if x != nil {
		return x.LiquidTokens
	}
	return ""
}

// NetAmountState is type for net amount raw data and mint rate, This is a value that depends on the several module
// state every time, so it is used only for calculation and query and is not stored in kv.
type NetAmountState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mint_rate is bTokenTotalSupply / NetAmount
	MintRate string `protobuf:"bytes,1,opt,name=mint_rate,json=mintRate,proto3" json:"mint_rate,omitempty"`
	// btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
	BtokenTotalSupply string `protobuf:"bytes,2,opt,name=btoken_total_supply,json=btokenTotalSupply,proto3" json:"btoken_total_supply,omitempty"`
	// net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
	// unbonding balance
	NetAmount string `protobuf:"bytes,3,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	// total_del_shares define the delegation shares of all liquid validators
	TotalDelShares string `protobuf:"bytes,4,opt,name=total_del_shares,json=totalDelShares,proto3" json:"total_del_shares,omitempty"`
	// total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
	// amount)
	TotalLiquidTokens string `protobuf:"bytes,5,opt,name=total_liquid_tokens,json=totalLiquidTokens,proto3" json:"total_liquid_tokens,omitempty"`
	// total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
	TotalRemainingRewards string `protobuf:"bytes,6,opt,name=total_remaining_rewards,json=totalRemainingRewards,proto3" json:"total_remaining_rewards,omitempty"`
	// total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
	// amount)
	TotalUnbondingBalance string `protobuf:"bytes,7,opt,name=total_unbonding_balance,json=totalUnbondingBalance,proto3" json:"total_unbonding_balance,omitempty"`
	// proxy_acc_balance define the balance of proxy account for the native token
	ProxyAccBalance string `protobuf:"bytes,8,opt,name=proxy_acc_balance,json=proxyAccBalance,proto3" json:"proxy_acc_balance,omitempty"`
}

func (x *NetAmountState) Reset() {
	*x = NetAmountState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetAmountState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetAmountState) ProtoMessage() {}

// Deprecated: Use NetAmountState.ProtoReflect.Descriptor instead.
func (*NetAmountState) Descriptor() ([]byte, []int) {
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP(), []int{3}
}

func (x *NetAmountState) GetMintRate() string {
	if x != nil {
		return x.MintRate
	}
	return ""
}

func (x *NetAmountState) GetBtokenTotalSupply() string {
	if x != nil {
		return x.BtokenTotalSupply
	}
	return ""
}

func (x *NetAmountState) GetNetAmount() string {
	if x != nil {
		return x.NetAmount
	}
	return ""
}

func (x *NetAmountState) GetTotalDelShares() string {
	if x != nil {
		return x.TotalDelShares
	}
	return ""
}

func (x *NetAmountState) GetTotalLiquidTokens() string {
	if x != nil {
		return x.TotalLiquidTokens
	}
	return ""
}

func (x *NetAmountState) GetTotalRemainingRewards() string {
	if x != nil {
		return x.TotalRemainingRewards
	}
	return ""
}

func (x *NetAmountState) GetTotalUnbondingBalance() string {
	if x != nil {
		return x.TotalUnbondingBalance
	}
	return ""
}

func (x *NetAmountState) GetProxyAccBalance() string {
	if x != nil {
		return x.ProxyAccBalance
	}
	return ""
}

// VotingPower is type for current voting power of the voter including staking module's voting power and liquid staking
// module's voting power, It depends on the amount of delegation of staking module, the bonded state of the delegated
// validator, the value of btoken(liquid_bond_denom), and the pool coin and farming position containing btoken..
type VotingPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// voter defines the address of the voter; bech encoded in JSON.
	Voter string `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	// staking_voting_power return the voting power of staking that can be exercised.
	StakingVotingPower string `protobuf:"bytes,2,opt,name=staking_voting_power,json=stakingVotingPower,proto3" json:"staking_voting_power,omitempty"`
	// liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
	LiquidStakingVotingPower string `protobuf:"bytes,3,opt,name=liquid_staking_voting_power,json=liquidStakingVotingPower,proto3" json:"liquid_staking_voting_power,omitempty"`
	// validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
	// exercised.
	ValidatorVotingPower string `protobuf:"bytes,4,opt,name=validator_voting_power,json=validatorVotingPower,proto3" json:"validator_voting_power,omitempty"`
}

func (x *VotingPower) Reset() {
	*x = VotingPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotingPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingPower) ProtoMessage() {}

// Deprecated: Use VotingPower.ProtoReflect.Descriptor instead.
func (*VotingPower) Descriptor() ([]byte, []int) {
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP(), []int{4}
}

func (x *VotingPower) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *VotingPower) GetStakingVotingPower() string {
	if x != nil {
		return x.StakingVotingPower
	}
	return ""
}

func (x *VotingPower) GetLiquidStakingVotingPower() string {
	if x != nil {
		return x.LiquidStakingVotingPower
	}
	return ""
}

func (x *VotingPower) GetValidatorVotingPower() string {
	if x != nil {
		return x.ValidatorVotingPower
	}
	return ""
}

var File_sunrise_liquidstaking_liquidstaking_proto protoreflect.FileDescriptor

var file_sunrise_liquidstaking_liquidstaking_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x75, 0x6e,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x49, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x43, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x59, 0x0a, 0x0f, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x98, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73,
	0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0xf2, 0x05, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x62, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x62,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x50, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x5b, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1b, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x18, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x2a, 0xc7, 0x01, 0x0a, 0x0f, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x1c, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a,
	0x1e, 0x8a, 0x9d, 0x20, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x19, 0x8a, 0x9d,
	0x20, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x1b, 0x8a, 0x9d, 0x20, 0x17, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0xcc, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x75, 0x6e, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x12, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0xa2,
	0x02, 0x03, 0x53, 0x4c, 0x58, 0xaa, 0x02, 0x15, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x15,
	0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x5c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x21, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x5c,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x53, 0x75, 0x6e, 0x72,
	0x69, 0x73, 0x65, 0x3a, 0x3a, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sunrise_liquidstaking_liquidstaking_proto_rawDescOnce sync.Once
	file_sunrise_liquidstaking_liquidstaking_proto_rawDescData = file_sunrise_liquidstaking_liquidstaking_proto_rawDesc
)

func file_sunrise_liquidstaking_liquidstaking_proto_rawDescGZIP() []byte {
	file_sunrise_liquidstaking_liquidstaking_proto_rawDescOnce.Do(func() {
		file_sunrise_liquidstaking_liquidstaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_sunrise_liquidstaking_liquidstaking_proto_rawDescData)
	})
	return file_sunrise_liquidstaking_liquidstaking_proto_rawDescData
}

var file_sunrise_liquidstaking_liquidstaking_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sunrise_liquidstaking_liquidstaking_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sunrise_liquidstaking_liquidstaking_proto_goTypes = []interface{}{
	(ValidatorStatus)(0),         // 0: sunrise.liquidstaking.ValidatorStatus
	(*WhitelistedValidator)(nil), // 1: sunrise.liquidstaking.WhitelistedValidator
	(*LiquidValidator)(nil),      // 2: sunrise.liquidstaking.LiquidValidator
	(*LiquidValidatorState)(nil), // 3: sunrise.liquidstaking.LiquidValidatorState
	(*NetAmountState)(nil),       // 4: sunrise.liquidstaking.NetAmountState
	(*VotingPower)(nil),          // 5: sunrise.liquidstaking.VotingPower
}
var file_sunrise_liquidstaking_liquidstaking_proto_depIdxs = []int32{
	0, // 0: sunrise.liquidstaking.LiquidValidatorState.status:type_name -> sunrise.liquidstaking.ValidatorStatus
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sunrise_liquidstaking_liquidstaking_proto_init() }
func file_sunrise_liquidstaking_liquidstaking_proto_init() {
	if File_sunrise_liquidstaking_liquidstaking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistedValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidValidatorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetAmountState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_liquidstaking_liquidstaking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotingPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sunrise_liquidstaking_liquidstaking_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sunrise_liquidstaking_liquidstaking_proto_goTypes,
		DependencyIndexes: file_sunrise_liquidstaking_liquidstaking_proto_depIdxs,
		EnumInfos:         file_sunrise_liquidstaking_liquidstaking_proto_enumTypes,
		MessageInfos:      file_sunrise_liquidstaking_liquidstaking_proto_msgTypes,
	}.Build()
	File_sunrise_liquidstaking_liquidstaking_proto = out.File
	file_sunrise_liquidstaking_liquidstaking_proto_rawDesc = nil
	file_sunrise_liquidstaking_liquidstaking_proto_goTypes = nil
	file_sunrise_liquidstaking_liquidstaking_proto_depIdxs = nil
}
