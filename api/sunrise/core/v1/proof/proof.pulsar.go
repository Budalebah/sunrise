// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package proof

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	crypto "cosmossdk.io/api/tendermint/crypto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var _ protoreflect.List = (*_ShareProof_1_list)(nil)

type _ShareProof_1_list struct {
	list *[][]byte
}

func (x *_ShareProof_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ShareProof_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_ShareProof_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ShareProof_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ShareProof_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ShareProof at list field Data as it is not of Message kind"))
}

func (x *_ShareProof_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ShareProof_1_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_ShareProof_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ShareProof_2_list)(nil)

type _ShareProof_2_list struct {
	list *[]*NMTProof
}

func (x *_ShareProof_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ShareProof_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ShareProof_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NMTProof)
	(*x.list)[i] = concreteValue
}

func (x *_ShareProof_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NMTProof)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ShareProof_2_list) AppendMutable() protoreflect.Value {
	v := new(NMTProof)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ShareProof_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ShareProof_2_list) NewElement() protoreflect.Value {
	v := new(NMTProof)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ShareProof_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ShareProof                   protoreflect.MessageDescriptor
	fd_ShareProof_data              protoreflect.FieldDescriptor
	fd_ShareProof_share_proofs      protoreflect.FieldDescriptor
	fd_ShareProof_namespace_id      protoreflect.FieldDescriptor
	fd_ShareProof_row_proof         protoreflect.FieldDescriptor
	fd_ShareProof_namespace_version protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_core_v1_proof_proof_proto_init()
	md_ShareProof = File_sunrise_core_v1_proof_proof_proto.Messages().ByName("ShareProof")
	fd_ShareProof_data = md_ShareProof.Fields().ByName("data")
	fd_ShareProof_share_proofs = md_ShareProof.Fields().ByName("share_proofs")
	fd_ShareProof_namespace_id = md_ShareProof.Fields().ByName("namespace_id")
	fd_ShareProof_row_proof = md_ShareProof.Fields().ByName("row_proof")
	fd_ShareProof_namespace_version = md_ShareProof.Fields().ByName("namespace_version")
}

var _ protoreflect.Message = (*fastReflection_ShareProof)(nil)

type fastReflection_ShareProof ShareProof

func (x *ShareProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ShareProof)(x)
}

func (x *ShareProof) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_core_v1_proof_proof_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ShareProof_messageType fastReflection_ShareProof_messageType
var _ protoreflect.MessageType = fastReflection_ShareProof_messageType{}

type fastReflection_ShareProof_messageType struct{}

func (x fastReflection_ShareProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ShareProof)(nil)
}
func (x fastReflection_ShareProof_messageType) New() protoreflect.Message {
	return new(fastReflection_ShareProof)
}
func (x fastReflection_ShareProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ShareProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ShareProof) Descriptor() protoreflect.MessageDescriptor {
	return md_ShareProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ShareProof) Type() protoreflect.MessageType {
	return _fastReflection_ShareProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ShareProof) New() protoreflect.Message {
	return new(fastReflection_ShareProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ShareProof) Interface() protoreflect.ProtoMessage {
	return (*ShareProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ShareProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfList(&_ShareProof_1_list{list: &x.Data})
		if !f(fd_ShareProof_data, value) {
			return
		}
	}
	if len(x.ShareProofs) != 0 {
		value := protoreflect.ValueOfList(&_ShareProof_2_list{list: &x.ShareProofs})
		if !f(fd_ShareProof_share_proofs, value) {
			return
		}
	}
	if len(x.NamespaceId) != 0 {
		value := protoreflect.ValueOfBytes(x.NamespaceId)
		if !f(fd_ShareProof_namespace_id, value) {
			return
		}
	}
	if x.RowProof != nil {
		value := protoreflect.ValueOfMessage(x.RowProof.ProtoReflect())
		if !f(fd_ShareProof_row_proof, value) {
			return
		}
	}
	if x.NamespaceVersion != uint32(0) {
		value := protoreflect.ValueOfUint32(x.NamespaceVersion)
		if !f(fd_ShareProof_namespace_version, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ShareProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.ShareProof.data":
		return len(x.Data) != 0
	case "sunrise.core.v1.proof.ShareProof.share_proofs":
		return len(x.ShareProofs) != 0
	case "sunrise.core.v1.proof.ShareProof.namespace_id":
		return len(x.NamespaceId) != 0
	case "sunrise.core.v1.proof.ShareProof.row_proof":
		return x.RowProof != nil
	case "sunrise.core.v1.proof.ShareProof.namespace_version":
		return x.NamespaceVersion != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.ShareProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.ShareProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.ShareProof.data":
		x.Data = nil
	case "sunrise.core.v1.proof.ShareProof.share_proofs":
		x.ShareProofs = nil
	case "sunrise.core.v1.proof.ShareProof.namespace_id":
		x.NamespaceId = nil
	case "sunrise.core.v1.proof.ShareProof.row_proof":
		x.RowProof = nil
	case "sunrise.core.v1.proof.ShareProof.namespace_version":
		x.NamespaceVersion = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.ShareProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.ShareProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ShareProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.core.v1.proof.ShareProof.data":
		if len(x.Data) == 0 {
			return protoreflect.ValueOfList(&_ShareProof_1_list{})
		}
		listValue := &_ShareProof_1_list{list: &x.Data}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.core.v1.proof.ShareProof.share_proofs":
		if len(x.ShareProofs) == 0 {
			return protoreflect.ValueOfList(&_ShareProof_2_list{})
		}
		listValue := &_ShareProof_2_list{list: &x.ShareProofs}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.core.v1.proof.ShareProof.namespace_id":
		value := x.NamespaceId
		return protoreflect.ValueOfBytes(value)
	case "sunrise.core.v1.proof.ShareProof.row_proof":
		value := x.RowProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.core.v1.proof.ShareProof.namespace_version":
		value := x.NamespaceVersion
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.ShareProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.ShareProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.ShareProof.data":
		lv := value.List()
		clv := lv.(*_ShareProof_1_list)
		x.Data = *clv.list
	case "sunrise.core.v1.proof.ShareProof.share_proofs":
		lv := value.List()
		clv := lv.(*_ShareProof_2_list)
		x.ShareProofs = *clv.list
	case "sunrise.core.v1.proof.ShareProof.namespace_id":
		x.NamespaceId = value.Bytes()
	case "sunrise.core.v1.proof.ShareProof.row_proof":
		x.RowProof = value.Message().Interface().(*RowProof)
	case "sunrise.core.v1.proof.ShareProof.namespace_version":
		x.NamespaceVersion = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.ShareProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.ShareProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.ShareProof.data":
		if x.Data == nil {
			x.Data = [][]byte{}
		}
		value := &_ShareProof_1_list{list: &x.Data}
		return protoreflect.ValueOfList(value)
	case "sunrise.core.v1.proof.ShareProof.share_proofs":
		if x.ShareProofs == nil {
			x.ShareProofs = []*NMTProof{}
		}
		value := &_ShareProof_2_list{list: &x.ShareProofs}
		return protoreflect.ValueOfList(value)
	case "sunrise.core.v1.proof.ShareProof.row_proof":
		if x.RowProof == nil {
			x.RowProof = new(RowProof)
		}
		return protoreflect.ValueOfMessage(x.RowProof.ProtoReflect())
	case "sunrise.core.v1.proof.ShareProof.namespace_id":
		panic(fmt.Errorf("field namespace_id of message sunrise.core.v1.proof.ShareProof is not mutable"))
	case "sunrise.core.v1.proof.ShareProof.namespace_version":
		panic(fmt.Errorf("field namespace_version of message sunrise.core.v1.proof.ShareProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.ShareProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.ShareProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ShareProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.ShareProof.data":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_ShareProof_1_list{list: &list})
	case "sunrise.core.v1.proof.ShareProof.share_proofs":
		list := []*NMTProof{}
		return protoreflect.ValueOfList(&_ShareProof_2_list{list: &list})
	case "sunrise.core.v1.proof.ShareProof.namespace_id":
		return protoreflect.ValueOfBytes(nil)
	case "sunrise.core.v1.proof.ShareProof.row_proof":
		m := new(RowProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.core.v1.proof.ShareProof.namespace_version":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.ShareProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.ShareProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ShareProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.core.v1.proof.ShareProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ShareProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ShareProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ShareProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ShareProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Data) > 0 {
			for _, b := range x.Data {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ShareProofs) > 0 {
			for _, e := range x.ShareProofs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.NamespaceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RowProof != nil {
			l = options.Size(x.RowProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NamespaceVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.NamespaceVersion))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ShareProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.NamespaceVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NamespaceVersion))
			i--
			dAtA[i] = 0x28
		}
		if x.RowProof != nil {
			encoded, err := options.Marshal(x.RowProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.NamespaceId) > 0 {
			i -= len(x.NamespaceId)
			copy(dAtA[i:], x.NamespaceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NamespaceId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ShareProofs) > 0 {
			for iNdEx := len(x.ShareProofs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ShareProofs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Data) > 0 {
			for iNdEx := len(x.Data) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Data[iNdEx])
				copy(dAtA[i:], x.Data[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ShareProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ShareProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ShareProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data, make([]byte, postIndex-iNdEx))
				copy(x.Data[len(x.Data)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ShareProofs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ShareProofs = append(x.ShareProofs, &NMTProof{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ShareProofs[len(x.ShareProofs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NamespaceId = append(x.NamespaceId[:0], dAtA[iNdEx:postIndex]...)
				if x.NamespaceId == nil {
					x.NamespaceId = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RowProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RowProof == nil {
					x.RowProof = &RowProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RowProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NamespaceVersion", wireType)
				}
				x.NamespaceVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NamespaceVersion |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RowProof_1_list)(nil)

type _RowProof_1_list struct {
	list *[][]byte
}

func (x *_RowProof_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RowProof_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_RowProof_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RowProof_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RowProof_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RowProof at list field RowRoots as it is not of Message kind"))
}

func (x *_RowProof_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RowProof_1_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_RowProof_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_RowProof_2_list)(nil)

type _RowProof_2_list struct {
	list *[]*crypto.Proof
}

func (x *_RowProof_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RowProof_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_RowProof_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*crypto.Proof)
	(*x.list)[i] = concreteValue
}

func (x *_RowProof_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*crypto.Proof)
	*x.list = append(*x.list, concreteValue)
}

func (x *_RowProof_2_list) AppendMutable() protoreflect.Value {
	v := new(crypto.Proof)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RowProof_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_RowProof_2_list) NewElement() protoreflect.Value {
	v := new(crypto.Proof)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RowProof_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RowProof           protoreflect.MessageDescriptor
	fd_RowProof_row_roots protoreflect.FieldDescriptor
	fd_RowProof_proofs    protoreflect.FieldDescriptor
	fd_RowProof_root      protoreflect.FieldDescriptor
	fd_RowProof_start_row protoreflect.FieldDescriptor
	fd_RowProof_end_row   protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_core_v1_proof_proof_proto_init()
	md_RowProof = File_sunrise_core_v1_proof_proof_proto.Messages().ByName("RowProof")
	fd_RowProof_row_roots = md_RowProof.Fields().ByName("row_roots")
	fd_RowProof_proofs = md_RowProof.Fields().ByName("proofs")
	fd_RowProof_root = md_RowProof.Fields().ByName("root")
	fd_RowProof_start_row = md_RowProof.Fields().ByName("start_row")
	fd_RowProof_end_row = md_RowProof.Fields().ByName("end_row")
}

var _ protoreflect.Message = (*fastReflection_RowProof)(nil)

type fastReflection_RowProof RowProof

func (x *RowProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RowProof)(x)
}

func (x *RowProof) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_core_v1_proof_proof_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RowProof_messageType fastReflection_RowProof_messageType
var _ protoreflect.MessageType = fastReflection_RowProof_messageType{}

type fastReflection_RowProof_messageType struct{}

func (x fastReflection_RowProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RowProof)(nil)
}
func (x fastReflection_RowProof_messageType) New() protoreflect.Message {
	return new(fastReflection_RowProof)
}
func (x fastReflection_RowProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RowProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RowProof) Descriptor() protoreflect.MessageDescriptor {
	return md_RowProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RowProof) Type() protoreflect.MessageType {
	return _fastReflection_RowProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RowProof) New() protoreflect.Message {
	return new(fastReflection_RowProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RowProof) Interface() protoreflect.ProtoMessage {
	return (*RowProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RowProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.RowRoots) != 0 {
		value := protoreflect.ValueOfList(&_RowProof_1_list{list: &x.RowRoots})
		if !f(fd_RowProof_row_roots, value) {
			return
		}
	}
	if len(x.Proofs) != 0 {
		value := protoreflect.ValueOfList(&_RowProof_2_list{list: &x.Proofs})
		if !f(fd_RowProof_proofs, value) {
			return
		}
	}
	if len(x.Root) != 0 {
		value := protoreflect.ValueOfBytes(x.Root)
		if !f(fd_RowProof_root, value) {
			return
		}
	}
	if x.StartRow != uint32(0) {
		value := protoreflect.ValueOfUint32(x.StartRow)
		if !f(fd_RowProof_start_row, value) {
			return
		}
	}
	if x.EndRow != uint32(0) {
		value := protoreflect.ValueOfUint32(x.EndRow)
		if !f(fd_RowProof_end_row, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RowProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.RowProof.row_roots":
		return len(x.RowRoots) != 0
	case "sunrise.core.v1.proof.RowProof.proofs":
		return len(x.Proofs) != 0
	case "sunrise.core.v1.proof.RowProof.root":
		return len(x.Root) != 0
	case "sunrise.core.v1.proof.RowProof.start_row":
		return x.StartRow != uint32(0)
	case "sunrise.core.v1.proof.RowProof.end_row":
		return x.EndRow != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.RowProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.RowProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RowProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.RowProof.row_roots":
		x.RowRoots = nil
	case "sunrise.core.v1.proof.RowProof.proofs":
		x.Proofs = nil
	case "sunrise.core.v1.proof.RowProof.root":
		x.Root = nil
	case "sunrise.core.v1.proof.RowProof.start_row":
		x.StartRow = uint32(0)
	case "sunrise.core.v1.proof.RowProof.end_row":
		x.EndRow = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.RowProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.RowProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RowProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.core.v1.proof.RowProof.row_roots":
		if len(x.RowRoots) == 0 {
			return protoreflect.ValueOfList(&_RowProof_1_list{})
		}
		listValue := &_RowProof_1_list{list: &x.RowRoots}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.core.v1.proof.RowProof.proofs":
		if len(x.Proofs) == 0 {
			return protoreflect.ValueOfList(&_RowProof_2_list{})
		}
		listValue := &_RowProof_2_list{list: &x.Proofs}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.core.v1.proof.RowProof.root":
		value := x.Root
		return protoreflect.ValueOfBytes(value)
	case "sunrise.core.v1.proof.RowProof.start_row":
		value := x.StartRow
		return protoreflect.ValueOfUint32(value)
	case "sunrise.core.v1.proof.RowProof.end_row":
		value := x.EndRow
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.RowProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.RowProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RowProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.RowProof.row_roots":
		lv := value.List()
		clv := lv.(*_RowProof_1_list)
		x.RowRoots = *clv.list
	case "sunrise.core.v1.proof.RowProof.proofs":
		lv := value.List()
		clv := lv.(*_RowProof_2_list)
		x.Proofs = *clv.list
	case "sunrise.core.v1.proof.RowProof.root":
		x.Root = value.Bytes()
	case "sunrise.core.v1.proof.RowProof.start_row":
		x.StartRow = uint32(value.Uint())
	case "sunrise.core.v1.proof.RowProof.end_row":
		x.EndRow = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.RowProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.RowProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RowProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.RowProof.row_roots":
		if x.RowRoots == nil {
			x.RowRoots = [][]byte{}
		}
		value := &_RowProof_1_list{list: &x.RowRoots}
		return protoreflect.ValueOfList(value)
	case "sunrise.core.v1.proof.RowProof.proofs":
		if x.Proofs == nil {
			x.Proofs = []*crypto.Proof{}
		}
		value := &_RowProof_2_list{list: &x.Proofs}
		return protoreflect.ValueOfList(value)
	case "sunrise.core.v1.proof.RowProof.root":
		panic(fmt.Errorf("field root of message sunrise.core.v1.proof.RowProof is not mutable"))
	case "sunrise.core.v1.proof.RowProof.start_row":
		panic(fmt.Errorf("field start_row of message sunrise.core.v1.proof.RowProof is not mutable"))
	case "sunrise.core.v1.proof.RowProof.end_row":
		panic(fmt.Errorf("field end_row of message sunrise.core.v1.proof.RowProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.RowProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.RowProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RowProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.RowProof.row_roots":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_RowProof_1_list{list: &list})
	case "sunrise.core.v1.proof.RowProof.proofs":
		list := []*crypto.Proof{}
		return protoreflect.ValueOfList(&_RowProof_2_list{list: &list})
	case "sunrise.core.v1.proof.RowProof.root":
		return protoreflect.ValueOfBytes(nil)
	case "sunrise.core.v1.proof.RowProof.start_row":
		return protoreflect.ValueOfUint32(uint32(0))
	case "sunrise.core.v1.proof.RowProof.end_row":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.RowProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.RowProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RowProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.core.v1.proof.RowProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RowProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RowProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RowProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RowProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RowProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.RowRoots) > 0 {
			for _, b := range x.RowRoots {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Proofs) > 0 {
			for _, e := range x.Proofs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Root)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartRow != 0 {
			n += 1 + runtime.Sov(uint64(x.StartRow))
		}
		if x.EndRow != 0 {
			n += 1 + runtime.Sov(uint64(x.EndRow))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RowProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EndRow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndRow))
			i--
			dAtA[i] = 0x28
		}
		if x.StartRow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartRow))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Root) > 0 {
			i -= len(x.Root)
			copy(dAtA[i:], x.Root)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Root)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Proofs) > 0 {
			for iNdEx := len(x.Proofs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Proofs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.RowRoots) > 0 {
			for iNdEx := len(x.RowRoots) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.RowRoots[iNdEx])
				copy(dAtA[i:], x.RowRoots[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RowRoots[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RowProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RowProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RowProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RowRoots", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RowRoots = append(x.RowRoots, make([]byte, postIndex-iNdEx))
				copy(x.RowRoots[len(x.RowRoots)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proofs = append(x.Proofs, &crypto.Proof{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proofs[len(x.Proofs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Root = append(x.Root[:0], dAtA[iNdEx:postIndex]...)
				if x.Root == nil {
					x.Root = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartRow", wireType)
				}
				x.StartRow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartRow |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndRow", wireType)
				}
				x.EndRow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndRow |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_NMTProof_3_list)(nil)

type _NMTProof_3_list struct {
	list *[][]byte
}

func (x *_NMTProof_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_NMTProof_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_NMTProof_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_NMTProof_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_NMTProof_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message NMTProof at list field Nodes as it is not of Message kind"))
}

func (x *_NMTProof_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_NMTProof_3_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_NMTProof_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_NMTProof           protoreflect.MessageDescriptor
	fd_NMTProof_start     protoreflect.FieldDescriptor
	fd_NMTProof_end       protoreflect.FieldDescriptor
	fd_NMTProof_nodes     protoreflect.FieldDescriptor
	fd_NMTProof_leaf_hash protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_core_v1_proof_proof_proto_init()
	md_NMTProof = File_sunrise_core_v1_proof_proof_proto.Messages().ByName("NMTProof")
	fd_NMTProof_start = md_NMTProof.Fields().ByName("start")
	fd_NMTProof_end = md_NMTProof.Fields().ByName("end")
	fd_NMTProof_nodes = md_NMTProof.Fields().ByName("nodes")
	fd_NMTProof_leaf_hash = md_NMTProof.Fields().ByName("leaf_hash")
}

var _ protoreflect.Message = (*fastReflection_NMTProof)(nil)

type fastReflection_NMTProof NMTProof

func (x *NMTProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NMTProof)(x)
}

func (x *NMTProof) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_core_v1_proof_proof_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NMTProof_messageType fastReflection_NMTProof_messageType
var _ protoreflect.MessageType = fastReflection_NMTProof_messageType{}

type fastReflection_NMTProof_messageType struct{}

func (x fastReflection_NMTProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NMTProof)(nil)
}
func (x fastReflection_NMTProof_messageType) New() protoreflect.Message {
	return new(fastReflection_NMTProof)
}
func (x fastReflection_NMTProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NMTProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NMTProof) Descriptor() protoreflect.MessageDescriptor {
	return md_NMTProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NMTProof) Type() protoreflect.MessageType {
	return _fastReflection_NMTProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NMTProof) New() protoreflect.Message {
	return new(fastReflection_NMTProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NMTProof) Interface() protoreflect.ProtoMessage {
	return (*NMTProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NMTProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Start != int32(0) {
		value := protoreflect.ValueOfInt32(x.Start)
		if !f(fd_NMTProof_start, value) {
			return
		}
	}
	if x.End != int32(0) {
		value := protoreflect.ValueOfInt32(x.End)
		if !f(fd_NMTProof_end, value) {
			return
		}
	}
	if len(x.Nodes) != 0 {
		value := protoreflect.ValueOfList(&_NMTProof_3_list{list: &x.Nodes})
		if !f(fd_NMTProof_nodes, value) {
			return
		}
	}
	if len(x.LeafHash) != 0 {
		value := protoreflect.ValueOfBytes(x.LeafHash)
		if !f(fd_NMTProof_leaf_hash, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NMTProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.NMTProof.start":
		return x.Start != int32(0)
	case "sunrise.core.v1.proof.NMTProof.end":
		return x.End != int32(0)
	case "sunrise.core.v1.proof.NMTProof.nodes":
		return len(x.Nodes) != 0
	case "sunrise.core.v1.proof.NMTProof.leaf_hash":
		return len(x.LeafHash) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.NMTProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.NMTProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NMTProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.NMTProof.start":
		x.Start = int32(0)
	case "sunrise.core.v1.proof.NMTProof.end":
		x.End = int32(0)
	case "sunrise.core.v1.proof.NMTProof.nodes":
		x.Nodes = nil
	case "sunrise.core.v1.proof.NMTProof.leaf_hash":
		x.LeafHash = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.NMTProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.NMTProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NMTProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.core.v1.proof.NMTProof.start":
		value := x.Start
		return protoreflect.ValueOfInt32(value)
	case "sunrise.core.v1.proof.NMTProof.end":
		value := x.End
		return protoreflect.ValueOfInt32(value)
	case "sunrise.core.v1.proof.NMTProof.nodes":
		if len(x.Nodes) == 0 {
			return protoreflect.ValueOfList(&_NMTProof_3_list{})
		}
		listValue := &_NMTProof_3_list{list: &x.Nodes}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.core.v1.proof.NMTProof.leaf_hash":
		value := x.LeafHash
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.NMTProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.NMTProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NMTProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.NMTProof.start":
		x.Start = int32(value.Int())
	case "sunrise.core.v1.proof.NMTProof.end":
		x.End = int32(value.Int())
	case "sunrise.core.v1.proof.NMTProof.nodes":
		lv := value.List()
		clv := lv.(*_NMTProof_3_list)
		x.Nodes = *clv.list
	case "sunrise.core.v1.proof.NMTProof.leaf_hash":
		x.LeafHash = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.NMTProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.NMTProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NMTProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.NMTProof.nodes":
		if x.Nodes == nil {
			x.Nodes = [][]byte{}
		}
		value := &_NMTProof_3_list{list: &x.Nodes}
		return protoreflect.ValueOfList(value)
	case "sunrise.core.v1.proof.NMTProof.start":
		panic(fmt.Errorf("field start of message sunrise.core.v1.proof.NMTProof is not mutable"))
	case "sunrise.core.v1.proof.NMTProof.end":
		panic(fmt.Errorf("field end of message sunrise.core.v1.proof.NMTProof is not mutable"))
	case "sunrise.core.v1.proof.NMTProof.leaf_hash":
		panic(fmt.Errorf("field leaf_hash of message sunrise.core.v1.proof.NMTProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.NMTProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.NMTProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NMTProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.core.v1.proof.NMTProof.start":
		return protoreflect.ValueOfInt32(int32(0))
	case "sunrise.core.v1.proof.NMTProof.end":
		return protoreflect.ValueOfInt32(int32(0))
	case "sunrise.core.v1.proof.NMTProof.nodes":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_NMTProof_3_list{list: &list})
	case "sunrise.core.v1.proof.NMTProof.leaf_hash":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.core.v1.proof.NMTProof"))
		}
		panic(fmt.Errorf("message sunrise.core.v1.proof.NMTProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NMTProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.core.v1.proof.NMTProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NMTProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NMTProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NMTProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NMTProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NMTProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Start != 0 {
			n += 1 + runtime.Sov(uint64(x.Start))
		}
		if x.End != 0 {
			n += 1 + runtime.Sov(uint64(x.End))
		}
		if len(x.Nodes) > 0 {
			for _, b := range x.Nodes {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.LeafHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NMTProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.LeafHash) > 0 {
			i -= len(x.LeafHash)
			copy(dAtA[i:], x.LeafHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LeafHash)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Nodes) > 0 {
			for iNdEx := len(x.Nodes) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Nodes[iNdEx])
				copy(dAtA[i:], x.Nodes[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Nodes[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.End != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.End))
			i--
			dAtA[i] = 0x10
		}
		if x.Start != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Start))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NMTProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NMTProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NMTProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
				}
				x.Start = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Start |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
				}
				x.End = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.End |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Nodes = append(x.Nodes, make([]byte, postIndex-iNdEx))
				copy(x.Nodes[len(x.Nodes)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LeafHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LeafHash = append(x.LeafHash[:0], dAtA[iNdEx:postIndex]...)
				if x.LeafHash == nil {
					x.LeafHash = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sunrise/core/v1/proof/proof.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ShareProof is an NMT proof that a set of shares exist in a set of rows and a
// Merkle proof that those rows exist in a Merkle tree with a given data root.
type ShareProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data             [][]byte    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	ShareProofs      []*NMTProof `protobuf:"bytes,2,rep,name=share_proofs,json=shareProofs,proto3" json:"share_proofs,omitempty"`
	NamespaceId      []byte      `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	RowProof         *RowProof   `protobuf:"bytes,4,opt,name=row_proof,json=rowProof,proto3" json:"row_proof,omitempty"`
	NamespaceVersion uint32      `protobuf:"varint,5,opt,name=namespace_version,json=namespaceVersion,proto3" json:"namespace_version,omitempty"`
}

func (x *ShareProof) Reset() {
	*x = ShareProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_core_v1_proof_proof_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareProof) ProtoMessage() {}

// Deprecated: Use ShareProof.ProtoReflect.Descriptor instead.
func (*ShareProof) Descriptor() ([]byte, []int) {
	return file_sunrise_core_v1_proof_proof_proto_rawDescGZIP(), []int{0}
}

func (x *ShareProof) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShareProof) GetShareProofs() []*NMTProof {
	if x != nil {
		return x.ShareProofs
	}
	return nil
}

func (x *ShareProof) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *ShareProof) GetRowProof() *RowProof {
	if x != nil {
		return x.RowProof
	}
	return nil
}

func (x *ShareProof) GetNamespaceVersion() uint32 {
	if x != nil {
		return x.NamespaceVersion
	}
	return 0
}

// RowProof is a Merkle proof that a set of rows exist in a Merkle tree with a
// given data root.
type RowProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowRoots [][]byte        `protobuf:"bytes,1,rep,name=row_roots,json=rowRoots,proto3" json:"row_roots,omitempty"`
	Proofs   []*crypto.Proof `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Root     []byte          `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	StartRow uint32          `protobuf:"varint,4,opt,name=start_row,json=startRow,proto3" json:"start_row,omitempty"`
	EndRow   uint32          `protobuf:"varint,5,opt,name=end_row,json=endRow,proto3" json:"end_row,omitempty"`
}

func (x *RowProof) Reset() {
	*x = RowProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_core_v1_proof_proof_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowProof) ProtoMessage() {}

// Deprecated: Use RowProof.ProtoReflect.Descriptor instead.
func (*RowProof) Descriptor() ([]byte, []int) {
	return file_sunrise_core_v1_proof_proof_proto_rawDescGZIP(), []int{1}
}

func (x *RowProof) GetRowRoots() [][]byte {
	if x != nil {
		return x.RowRoots
	}
	return nil
}

func (x *RowProof) GetProofs() []*crypto.Proof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *RowProof) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *RowProof) GetStartRow() uint32 {
	if x != nil {
		return x.StartRow
	}
	return 0
}

func (x *RowProof) GetEndRow() uint32 {
	if x != nil {
		return x.EndRow
	}
	return 0
}

// NMTProof is a proof of a namespace.ID in an NMT.
// In case this proof proves the absence of a namespace.ID
// in a tree it also contains the leaf hashes of the range
// where that namespace would be.
type NMTProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start index of this proof.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End index of this proof.
	End int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// Nodes that together with the corresponding leaf values can be used to
	// recompute the root and verify this proof. Nodes should consist of the max
	// and min namespaces along with the actual hash, resulting in each being 48
	// bytes each
	Nodes [][]byte `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// leafHash are nil if the namespace is present in the NMT. In case the
	// namespace to be proved is in the min/max range of the tree but absent, this
	// will contain the leaf hash necessary to verify the proof of absence. Leaf
	// hashes should consist of the namespace along with the actual hash,
	// resulting 40 bytes total.
	LeafHash []byte `protobuf:"bytes,4,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
}

func (x *NMTProof) Reset() {
	*x = NMTProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_core_v1_proof_proof_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NMTProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NMTProof) ProtoMessage() {}

// Deprecated: Use NMTProof.ProtoReflect.Descriptor instead.
func (*NMTProof) Descriptor() ([]byte, []int) {
	return file_sunrise_core_v1_proof_proof_proto_rawDescGZIP(), []int{2}
}

func (x *NMTProof) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *NMTProof) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *NMTProof) GetNodes() [][]byte {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NMTProof) GetLeafHash() []byte {
	if x != nil {
		return x.LeafHash
	}
	return nil
}

var File_sunrise_core_v1_proof_proof_proto protoreflect.FileDescriptor

var file_sunrise_core_v1_proof_proof_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x1d, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x4e, 0x4d, 0x54, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x52,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3,
	0x01, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x52, 0x6f, 0x77, 0x22, 0x65, 0x0a, 0x08, 0x4e, 0x4d, 0x54, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x48, 0x61, 0x73, 0x68, 0x42, 0xc7, 0x01, 0x0a, 0x19,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0xa2,
	0x02, 0x04, 0x53, 0x43, 0x56, 0x50, 0xaa, 0x02, 0x15, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0xca, 0x02,
	0x15, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0xe2, 0x02, 0x21, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65,
	0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x53, 0x75, 0x6e,
	0x72, 0x69, 0x73, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sunrise_core_v1_proof_proof_proto_rawDescOnce sync.Once
	file_sunrise_core_v1_proof_proof_proto_rawDescData = file_sunrise_core_v1_proof_proof_proto_rawDesc
)

func file_sunrise_core_v1_proof_proof_proto_rawDescGZIP() []byte {
	file_sunrise_core_v1_proof_proof_proto_rawDescOnce.Do(func() {
		file_sunrise_core_v1_proof_proof_proto_rawDescData = protoimpl.X.CompressGZIP(file_sunrise_core_v1_proof_proof_proto_rawDescData)
	})
	return file_sunrise_core_v1_proof_proof_proto_rawDescData
}

var file_sunrise_core_v1_proof_proof_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sunrise_core_v1_proof_proof_proto_goTypes = []interface{}{
	(*ShareProof)(nil),   // 0: sunrise.core.v1.proof.ShareProof
	(*RowProof)(nil),     // 1: sunrise.core.v1.proof.RowProof
	(*NMTProof)(nil),     // 2: sunrise.core.v1.proof.NMTProof
	(*crypto.Proof)(nil), // 3: tendermint.crypto.Proof
}
var file_sunrise_core_v1_proof_proof_proto_depIdxs = []int32{
	2, // 0: sunrise.core.v1.proof.ShareProof.share_proofs:type_name -> sunrise.core.v1.proof.NMTProof
	1, // 1: sunrise.core.v1.proof.ShareProof.row_proof:type_name -> sunrise.core.v1.proof.RowProof
	3, // 2: sunrise.core.v1.proof.RowProof.proofs:type_name -> tendermint.crypto.Proof
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sunrise_core_v1_proof_proof_proto_init() }
func file_sunrise_core_v1_proof_proof_proto_init() {
	if File_sunrise_core_v1_proof_proof_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sunrise_core_v1_proof_proof_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_core_v1_proof_proof_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_core_v1_proof_proof_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NMTProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sunrise_core_v1_proof_proof_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sunrise_core_v1_proof_proof_proto_goTypes,
		DependencyIndexes: file_sunrise_core_v1_proof_proof_proto_depIdxs,
		MessageInfos:      file_sunrise_core_v1_proof_proof_proto_msgTypes,
	}.Build()
	File_sunrise_core_v1_proof_proof_proto = out.File
	file_sunrise_core_v1_proof_proof_proto_rawDesc = nil
	file_sunrise_core_v1_proof_proof_proto_goTypes = nil
	file_sunrise_core_v1_proof_proof_proto_depIdxs = nil
}
