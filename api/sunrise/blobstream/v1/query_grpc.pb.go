// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sunrise/blobstream/v1/query.proto

package blobstreamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                         = "/sunrise.blobstream.v1.Query/Params"
	Query_AttestationRequestByNonce_FullMethodName      = "/sunrise.blobstream.v1.Query/AttestationRequestByNonce"
	Query_LatestAttestationNonce_FullMethodName         = "/sunrise.blobstream.v1.Query/LatestAttestationNonce"
	Query_EarliestAttestationNonce_FullMethodName       = "/sunrise.blobstream.v1.Query/EarliestAttestationNonce"
	Query_LatestValsetRequestBeforeNonce_FullMethodName = "/sunrise.blobstream.v1.Query/LatestValsetRequestBeforeNonce"
	Query_LatestUnbondingHeight_FullMethodName          = "/sunrise.blobstream.v1.Query/LatestUnbondingHeight"
	Query_DataCommitmentRangeForHeight_FullMethodName   = "/sunrise.blobstream.v1.Query/DataCommitmentRangeForHeight"
	Query_LatestDataCommitment_FullMethodName           = "/sunrise.blobstream.v1.Query/LatestDataCommitment"
	Query_EVMAddress_FullMethodName                     = "/sunrise.blobstream.v1.Query/EVMAddress"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AttestationRequestByNonce queries attestation request by nonce.
	// Returns nil if not found.
	AttestationRequestByNonce(ctx context.Context, in *QueryAttestationRequestByNonceRequest, opts ...grpc.CallOption) (*QueryAttestationRequestByNonceResponse, error)
	// LatestAttestationNonce queries latest attestation nonce.
	LatestAttestationNonce(ctx context.Context, in *QueryLatestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryLatestAttestationNonceResponse, error)
	// EarliestAttestationNonce queries the earliest attestation nonce.
	EarliestAttestationNonce(ctx context.Context, in *QueryEarliestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryEarliestAttestationNonceResponse, error)
	// LatestValsetRequestBeforeNonce Queries latest Valset request before nonce.
	// And, even if the current nonce is a valset, it will return the previous
	// one.
	// If the provided nonce is 1, it will return an error, because, there is
	// no valset before nonce 1.
	LatestValsetRequestBeforeNonce(ctx context.Context, in *QueryLatestValsetRequestBeforeNonceRequest, opts ...grpc.CallOption) (*QueryLatestValsetRequestBeforeNonceResponse, error)
	// LatestUnbondingHeight returns the latest unbonding height
	LatestUnbondingHeight(ctx context.Context, in *QueryLatestUnbondingHeightRequest, opts ...grpc.CallOption) (*QueryLatestUnbondingHeightResponse, error)
	// DataCommitmentRangeForHeight returns the data commitment window
	// that includes the provided height
	DataCommitmentRangeForHeight(ctx context.Context, in *QueryDataCommitmentRangeForHeightRequest, opts ...grpc.CallOption) (*QueryDataCommitmentRangeForHeightResponse, error)
	// LatestDataCommitment returns the latest data commitment in store
	LatestDataCommitment(ctx context.Context, in *QueryLatestDataCommitmentRequest, opts ...grpc.CallOption) (*QueryLatestDataCommitmentResponse, error)
	// EVMAddress returns the evm address associated with a supplied
	// validator address
	EVMAddress(ctx context.Context, in *QueryEVMAddressRequest, opts ...grpc.CallOption) (*QueryEVMAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationRequestByNonce(ctx context.Context, in *QueryAttestationRequestByNonceRequest, opts ...grpc.CallOption) (*QueryAttestationRequestByNonceResponse, error) {
	out := new(QueryAttestationRequestByNonceResponse)
	err := c.cc.Invoke(ctx, Query_AttestationRequestByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestAttestationNonce(ctx context.Context, in *QueryLatestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryLatestAttestationNonceResponse, error) {
	out := new(QueryLatestAttestationNonceResponse)
	err := c.cc.Invoke(ctx, Query_LatestAttestationNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EarliestAttestationNonce(ctx context.Context, in *QueryEarliestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryEarliestAttestationNonceResponse, error) {
	out := new(QueryEarliestAttestationNonceResponse)
	err := c.cc.Invoke(ctx, Query_EarliestAttestationNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestValsetRequestBeforeNonce(ctx context.Context, in *QueryLatestValsetRequestBeforeNonceRequest, opts ...grpc.CallOption) (*QueryLatestValsetRequestBeforeNonceResponse, error) {
	out := new(QueryLatestValsetRequestBeforeNonceResponse)
	err := c.cc.Invoke(ctx, Query_LatestValsetRequestBeforeNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestUnbondingHeight(ctx context.Context, in *QueryLatestUnbondingHeightRequest, opts ...grpc.CallOption) (*QueryLatestUnbondingHeightResponse, error) {
	out := new(QueryLatestUnbondingHeightResponse)
	err := c.cc.Invoke(ctx, Query_LatestUnbondingHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentRangeForHeight(ctx context.Context, in *QueryDataCommitmentRangeForHeightRequest, opts ...grpc.CallOption) (*QueryDataCommitmentRangeForHeightResponse, error) {
	out := new(QueryDataCommitmentRangeForHeightResponse)
	err := c.cc.Invoke(ctx, Query_DataCommitmentRangeForHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestDataCommitment(ctx context.Context, in *QueryLatestDataCommitmentRequest, opts ...grpc.CallOption) (*QueryLatestDataCommitmentResponse, error) {
	out := new(QueryLatestDataCommitmentResponse)
	err := c.cc.Invoke(ctx, Query_LatestDataCommitment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EVMAddress(ctx context.Context, in *QueryEVMAddressRequest, opts ...grpc.CallOption) (*QueryEVMAddressResponse, error) {
	out := new(QueryEVMAddressResponse)
	err := c.cc.Invoke(ctx, Query_EVMAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AttestationRequestByNonce queries attestation request by nonce.
	// Returns nil if not found.
	AttestationRequestByNonce(context.Context, *QueryAttestationRequestByNonceRequest) (*QueryAttestationRequestByNonceResponse, error)
	// LatestAttestationNonce queries latest attestation nonce.
	LatestAttestationNonce(context.Context, *QueryLatestAttestationNonceRequest) (*QueryLatestAttestationNonceResponse, error)
	// EarliestAttestationNonce queries the earliest attestation nonce.
	EarliestAttestationNonce(context.Context, *QueryEarliestAttestationNonceRequest) (*QueryEarliestAttestationNonceResponse, error)
	// LatestValsetRequestBeforeNonce Queries latest Valset request before nonce.
	// And, even if the current nonce is a valset, it will return the previous
	// one.
	// If the provided nonce is 1, it will return an error, because, there is
	// no valset before nonce 1.
	LatestValsetRequestBeforeNonce(context.Context, *QueryLatestValsetRequestBeforeNonceRequest) (*QueryLatestValsetRequestBeforeNonceResponse, error)
	// LatestUnbondingHeight returns the latest unbonding height
	LatestUnbondingHeight(context.Context, *QueryLatestUnbondingHeightRequest) (*QueryLatestUnbondingHeightResponse, error)
	// DataCommitmentRangeForHeight returns the data commitment window
	// that includes the provided height
	DataCommitmentRangeForHeight(context.Context, *QueryDataCommitmentRangeForHeightRequest) (*QueryDataCommitmentRangeForHeightResponse, error)
	// LatestDataCommitment returns the latest data commitment in store
	LatestDataCommitment(context.Context, *QueryLatestDataCommitmentRequest) (*QueryLatestDataCommitmentResponse, error)
	// EVMAddress returns the evm address associated with a supplied
	// validator address
	EVMAddress(context.Context, *QueryEVMAddressRequest) (*QueryEVMAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) AttestationRequestByNonce(context.Context, *QueryAttestationRequestByNonceRequest) (*QueryAttestationRequestByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationRequestByNonce not implemented")
}
func (UnimplementedQueryServer) LatestAttestationNonce(context.Context, *QueryLatestAttestationNonceRequest) (*QueryLatestAttestationNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestAttestationNonce not implemented")
}
func (UnimplementedQueryServer) EarliestAttestationNonce(context.Context, *QueryEarliestAttestationNonceRequest) (*QueryEarliestAttestationNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarliestAttestationNonce not implemented")
}
func (UnimplementedQueryServer) LatestValsetRequestBeforeNonce(context.Context, *QueryLatestValsetRequestBeforeNonceRequest) (*QueryLatestValsetRequestBeforeNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestValsetRequestBeforeNonce not implemented")
}
func (UnimplementedQueryServer) LatestUnbondingHeight(context.Context, *QueryLatestUnbondingHeightRequest) (*QueryLatestUnbondingHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestUnbondingHeight not implemented")
}
func (UnimplementedQueryServer) DataCommitmentRangeForHeight(context.Context, *QueryDataCommitmentRangeForHeightRequest) (*QueryDataCommitmentRangeForHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentRangeForHeight not implemented")
}
func (UnimplementedQueryServer) LatestDataCommitment(context.Context, *QueryLatestDataCommitmentRequest) (*QueryLatestDataCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestDataCommitment not implemented")
}
func (UnimplementedQueryServer) EVMAddress(context.Context, *QueryEVMAddressRequest) (*QueryEVMAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVMAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationRequestByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationRequestByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationRequestByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AttestationRequestByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationRequestByNonce(ctx, req.(*QueryAttestationRequestByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestAttestationNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestAttestationNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestAttestationNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestAttestationNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestAttestationNonce(ctx, req.(*QueryLatestAttestationNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EarliestAttestationNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEarliestAttestationNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EarliestAttestationNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EarliestAttestationNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EarliestAttestationNonce(ctx, req.(*QueryEarliestAttestationNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestValsetRequestBeforeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestValsetRequestBeforeNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestValsetRequestBeforeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestValsetRequestBeforeNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestValsetRequestBeforeNonce(ctx, req.(*QueryLatestValsetRequestBeforeNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestUnbondingHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestUnbondingHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestUnbondingHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestUnbondingHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestUnbondingHeight(ctx, req.(*QueryLatestUnbondingHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentRangeForHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentRangeForHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentRangeForHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DataCommitmentRangeForHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentRangeForHeight(ctx, req.(*QueryDataCommitmentRangeForHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestDataCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestDataCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestDataCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestDataCommitment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestDataCommitment(ctx, req.(*QueryLatestDataCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EVMAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEVMAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EVMAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EVMAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EVMAddress(ctx, req.(*QueryEVMAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.blobstream.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AttestationRequestByNonce",
			Handler:    _Query_AttestationRequestByNonce_Handler,
		},
		{
			MethodName: "LatestAttestationNonce",
			Handler:    _Query_LatestAttestationNonce_Handler,
		},
		{
			MethodName: "EarliestAttestationNonce",
			Handler:    _Query_EarliestAttestationNonce_Handler,
		},
		{
			MethodName: "LatestValsetRequestBeforeNonce",
			Handler:    _Query_LatestValsetRequestBeforeNonce_Handler,
		},
		{
			MethodName: "LatestUnbondingHeight",
			Handler:    _Query_LatestUnbondingHeight_Handler,
		},
		{
			MethodName: "DataCommitmentRangeForHeight",
			Handler:    _Query_DataCommitmentRangeForHeight_Handler,
		},
		{
			MethodName: "LatestDataCommitment",
			Handler:    _Query_LatestDataCommitment_Handler,
		},
		{
			MethodName: "EVMAddress",
			Handler:    _Query_EVMAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/blobstream/v1/query.proto",
}
