// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sunrise/liquiditypool/v1/query.proto

package liquiditypoolv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                     = "/sunrise.liquiditypool.v1.Query/Params"
	Query_Pair_FullMethodName                       = "/sunrise.liquiditypool.v1.Query/Pair"
	Query_PairAll_FullMethodName                    = "/sunrise.liquiditypool.v1.Query/PairAll"
	Query_Pool_FullMethodName                       = "/sunrise.liquiditypool.v1.Query/Pool"
	Query_PoolAll_FullMethodName                    = "/sunrise.liquiditypool.v1.Query/PoolAll"
	Query_Twap_FullMethodName                       = "/sunrise.liquiditypool.v1.Query/Twap"
	Query_TwapAll_FullMethodName                    = "/sunrise.liquiditypool.v1.Query/TwapAll"
	Query_SimulateSwapExactAmountIn_FullMethodName  = "/sunrise.liquiditypool.v1.Query/SimulateSwapExactAmountIn"
	Query_SimulateSwapExactAmountOut_FullMethodName = "/sunrise.liquiditypool.v1.Query/SimulateSwapExactAmountOut"
	Query_SimulateJoinPool_FullMethodName           = "/sunrise.liquiditypool.v1.Query/SimulateJoinPool"
	Query_SimulateExitPool_FullMethodName           = "/sunrise.liquiditypool.v1.Query/SimulateExitPool"
	Query_OptimizeSwapExactAmountIn_FullMethodName  = "/sunrise.liquiditypool.v1.Query/OptimizeSwapExactAmountIn"
	Query_OptimizeSwapExactAmountOut_FullMethodName = "/sunrise.liquiditypool.v1.Query/OptimizeSwapExactAmountOut"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Pair items.
	Pair(ctx context.Context, in *QueryGetPairRequest, opts ...grpc.CallOption) (*QueryGetPairResponse, error)
	PairAll(ctx context.Context, in *QueryAllPairRequest, opts ...grpc.CallOption) (*QueryAllPairResponse, error)
	// Queries a list of Pool items.
	Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error)
	PoolAll(ctx context.Context, in *QueryAllPoolRequest, opts ...grpc.CallOption) (*QueryAllPoolResponse, error)
	// Queries a list of Twap items.
	Twap(ctx context.Context, in *QueryGetTwapRequest, opts ...grpc.CallOption) (*QueryGetTwapResponse, error)
	TwapAll(ctx context.Context, in *QueryAllTwapRequest, opts ...grpc.CallOption) (*QueryAllTwapResponse, error)
	SimulateSwapExactAmountIn(ctx context.Context, in *QuerySimulateSwapExactAmountInRequest, opts ...grpc.CallOption) (*QuerySimulateSwapExactAmountInResponse, error)
	SimulateSwapExactAmountOut(ctx context.Context, in *QuerySimulateSwapExactAmountOutRequest, opts ...grpc.CallOption) (*QuerySimulateSwapExactAmountOutResponse, error)
	SimulateJoinPool(ctx context.Context, in *QuerySimulateJoinPoolRequest, opts ...grpc.CallOption) (*QuerySimulateJoinPoolResponse, error)
	SimulateExitPool(ctx context.Context, in *QuerySimulateExitPoolRequest, opts ...grpc.CallOption) (*QuerySimulateExitPoolResponse, error)
	OptimizeSwapExactAmountIn(ctx context.Context, in *QueryOptimizeSwapExactAmountInRequest, opts ...grpc.CallOption) (*QueryOptimizeSwapExactAmountInResponse, error)
	OptimizeSwapExactAmountOut(ctx context.Context, in *QueryOptimizeSwapExactAmountOutRequest, opts ...grpc.CallOption) (*QueryOptimizeSwapExactAmountOutResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pair(ctx context.Context, in *QueryGetPairRequest, opts ...grpc.CallOption) (*QueryGetPairResponse, error) {
	out := new(QueryGetPairResponse)
	err := c.cc.Invoke(ctx, Query_Pair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PairAll(ctx context.Context, in *QueryAllPairRequest, opts ...grpc.CallOption) (*QueryAllPairResponse, error) {
	out := new(QueryAllPairResponse)
	err := c.cc.Invoke(ctx, Query_PairAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error) {
	out := new(QueryGetPoolResponse)
	err := c.cc.Invoke(ctx, Query_Pool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAll(ctx context.Context, in *QueryAllPoolRequest, opts ...grpc.CallOption) (*QueryAllPoolResponse, error) {
	out := new(QueryAllPoolResponse)
	err := c.cc.Invoke(ctx, Query_PoolAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Twap(ctx context.Context, in *QueryGetTwapRequest, opts ...grpc.CallOption) (*QueryGetTwapResponse, error) {
	out := new(QueryGetTwapResponse)
	err := c.cc.Invoke(ctx, Query_Twap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TwapAll(ctx context.Context, in *QueryAllTwapRequest, opts ...grpc.CallOption) (*QueryAllTwapResponse, error) {
	out := new(QueryAllTwapResponse)
	err := c.cc.Invoke(ctx, Query_TwapAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateSwapExactAmountIn(ctx context.Context, in *QuerySimulateSwapExactAmountInRequest, opts ...grpc.CallOption) (*QuerySimulateSwapExactAmountInResponse, error) {
	out := new(QuerySimulateSwapExactAmountInResponse)
	err := c.cc.Invoke(ctx, Query_SimulateSwapExactAmountIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateSwapExactAmountOut(ctx context.Context, in *QuerySimulateSwapExactAmountOutRequest, opts ...grpc.CallOption) (*QuerySimulateSwapExactAmountOutResponse, error) {
	out := new(QuerySimulateSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, Query_SimulateSwapExactAmountOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateJoinPool(ctx context.Context, in *QuerySimulateJoinPoolRequest, opts ...grpc.CallOption) (*QuerySimulateJoinPoolResponse, error) {
	out := new(QuerySimulateJoinPoolResponse)
	err := c.cc.Invoke(ctx, Query_SimulateJoinPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateExitPool(ctx context.Context, in *QuerySimulateExitPoolRequest, opts ...grpc.CallOption) (*QuerySimulateExitPoolResponse, error) {
	out := new(QuerySimulateExitPoolResponse)
	err := c.cc.Invoke(ctx, Query_SimulateExitPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptimizeSwapExactAmountIn(ctx context.Context, in *QueryOptimizeSwapExactAmountInRequest, opts ...grpc.CallOption) (*QueryOptimizeSwapExactAmountInResponse, error) {
	out := new(QueryOptimizeSwapExactAmountInResponse)
	err := c.cc.Invoke(ctx, Query_OptimizeSwapExactAmountIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptimizeSwapExactAmountOut(ctx context.Context, in *QueryOptimizeSwapExactAmountOutRequest, opts ...grpc.CallOption) (*QueryOptimizeSwapExactAmountOutResponse, error) {
	out := new(QueryOptimizeSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, Query_OptimizeSwapExactAmountOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Pair items.
	Pair(context.Context, *QueryGetPairRequest) (*QueryGetPairResponse, error)
	PairAll(context.Context, *QueryAllPairRequest) (*QueryAllPairResponse, error)
	// Queries a list of Pool items.
	Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error)
	PoolAll(context.Context, *QueryAllPoolRequest) (*QueryAllPoolResponse, error)
	// Queries a list of Twap items.
	Twap(context.Context, *QueryGetTwapRequest) (*QueryGetTwapResponse, error)
	TwapAll(context.Context, *QueryAllTwapRequest) (*QueryAllTwapResponse, error)
	SimulateSwapExactAmountIn(context.Context, *QuerySimulateSwapExactAmountInRequest) (*QuerySimulateSwapExactAmountInResponse, error)
	SimulateSwapExactAmountOut(context.Context, *QuerySimulateSwapExactAmountOutRequest) (*QuerySimulateSwapExactAmountOutResponse, error)
	SimulateJoinPool(context.Context, *QuerySimulateJoinPoolRequest) (*QuerySimulateJoinPoolResponse, error)
	SimulateExitPool(context.Context, *QuerySimulateExitPoolRequest) (*QuerySimulateExitPoolResponse, error)
	OptimizeSwapExactAmountIn(context.Context, *QueryOptimizeSwapExactAmountInRequest) (*QueryOptimizeSwapExactAmountInResponse, error)
	OptimizeSwapExactAmountOut(context.Context, *QueryOptimizeSwapExactAmountOutRequest) (*QueryOptimizeSwapExactAmountOutResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Pair(context.Context, *QueryGetPairRequest) (*QueryGetPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pair not implemented")
}
func (UnimplementedQueryServer) PairAll(context.Context, *QueryAllPairRequest) (*QueryAllPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PairAll not implemented")
}
func (UnimplementedQueryServer) Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (UnimplementedQueryServer) PoolAll(context.Context, *QueryAllPoolRequest) (*QueryAllPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAll not implemented")
}
func (UnimplementedQueryServer) Twap(context.Context, *QueryGetTwapRequest) (*QueryGetTwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Twap not implemented")
}
func (UnimplementedQueryServer) TwapAll(context.Context, *QueryAllTwapRequest) (*QueryAllTwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwapAll not implemented")
}
func (UnimplementedQueryServer) SimulateSwapExactAmountIn(context.Context, *QuerySimulateSwapExactAmountInRequest) (*QuerySimulateSwapExactAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateSwapExactAmountIn not implemented")
}
func (UnimplementedQueryServer) SimulateSwapExactAmountOut(context.Context, *QuerySimulateSwapExactAmountOutRequest) (*QuerySimulateSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateSwapExactAmountOut not implemented")
}
func (UnimplementedQueryServer) SimulateJoinPool(context.Context, *QuerySimulateJoinPoolRequest) (*QuerySimulateJoinPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateJoinPool not implemented")
}
func (UnimplementedQueryServer) SimulateExitPool(context.Context, *QuerySimulateExitPoolRequest) (*QuerySimulateExitPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateExitPool not implemented")
}
func (UnimplementedQueryServer) OptimizeSwapExactAmountIn(context.Context, *QueryOptimizeSwapExactAmountInRequest) (*QueryOptimizeSwapExactAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeSwapExactAmountIn not implemented")
}
func (UnimplementedQueryServer) OptimizeSwapExactAmountOut(context.Context, *QueryOptimizeSwapExactAmountOutRequest) (*QueryOptimizeSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeSwapExactAmountOut not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Pair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pair(ctx, req.(*QueryGetPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PairAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PairAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PairAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PairAll(ctx, req.(*QueryAllPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Pool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryGetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAll(ctx, req.(*QueryAllPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Twap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Twap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Twap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Twap(ctx, req.(*QueryGetTwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TwapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TwapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TwapAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TwapAll(ctx, req.(*QueryAllTwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateSwapExactAmountIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateSwapExactAmountInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateSwapExactAmountIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SimulateSwapExactAmountIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateSwapExactAmountIn(ctx, req.(*QuerySimulateSwapExactAmountInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateSwapExactAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateSwapExactAmountOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateSwapExactAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SimulateSwapExactAmountOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateSwapExactAmountOut(ctx, req.(*QuerySimulateSwapExactAmountOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateJoinPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateJoinPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateJoinPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SimulateJoinPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateJoinPool(ctx, req.(*QuerySimulateJoinPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateExitPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateExitPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateExitPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SimulateExitPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateExitPool(ctx, req.(*QuerySimulateExitPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptimizeSwapExactAmountIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptimizeSwapExactAmountInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptimizeSwapExactAmountIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptimizeSwapExactAmountIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptimizeSwapExactAmountIn(ctx, req.(*QueryOptimizeSwapExactAmountInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptimizeSwapExactAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptimizeSwapExactAmountOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptimizeSwapExactAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptimizeSwapExactAmountOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptimizeSwapExactAmountOut(ctx, req.(*QueryOptimizeSwapExactAmountOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.liquiditypool.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pair",
			Handler:    _Query_Pair_Handler,
		},
		{
			MethodName: "PairAll",
			Handler:    _Query_PairAll_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "PoolAll",
			Handler:    _Query_PoolAll_Handler,
		},
		{
			MethodName: "Twap",
			Handler:    _Query_Twap_Handler,
		},
		{
			MethodName: "TwapAll",
			Handler:    _Query_TwapAll_Handler,
		},
		{
			MethodName: "SimulateSwapExactAmountIn",
			Handler:    _Query_SimulateSwapExactAmountIn_Handler,
		},
		{
			MethodName: "SimulateSwapExactAmountOut",
			Handler:    _Query_SimulateSwapExactAmountOut_Handler,
		},
		{
			MethodName: "SimulateJoinPool",
			Handler:    _Query_SimulateJoinPool_Handler,
		},
		{
			MethodName: "SimulateExitPool",
			Handler:    _Query_SimulateExitPool_Handler,
		},
		{
			MethodName: "OptimizeSwapExactAmountIn",
			Handler:    _Query_OptimizeSwapExactAmountIn_Handler,
		},
		{
			MethodName: "OptimizeSwapExactAmountOut",
			Handler:    _Query_OptimizeSwapExactAmountOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/liquiditypool/v1/query.proto",
}
