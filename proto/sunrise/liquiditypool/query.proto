syntax = "proto3";

package sunrise.liquiditypool;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "sunrise/liquiditypool/params.proto";
import "sunrise/liquiditypool/pool.proto";
import "sunrise/liquiditypool/position.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquiditypool/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/params";
  
  }
  
  // Queries a list of Pool items.
  rpc Pool    (QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/pools/{id}";
  
  }
  rpc Pools (QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/pools";
  
  }
  
  // Queries a list of Position items.
  rpc Position    (QueryPositionRequest) returns (QueryPositionResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/positions/{id}";
  
  }
  rpc Positions (QueryPositionsRequest) returns (QueryPositionsResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/positions";

  }
  rpc AddressPositions (QueryAddressPositionsRequest) returns (QueryAddressPositionsResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/address/{address}/positions";

  }
  rpc PositionFees    (QueryPositionFeesRequest) returns (QueryPositionFeesResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/liquiditypool/positions/{id}/fees";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryPoolRequest {
  uint64 id = 1;
}

message QueryPoolResponse {
  Pool pool = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin token_base = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin token_quote = 3 [ (gogoproto.nullable) = false ];
}

message QueryPoolsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPoolsResponse {
  repeated Pool                                   pools       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPositionRequest {
  uint64 id = 1;
}

message QueryPositionResponse {
  Position position = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin token_base = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin token_quote = 3 [ (gogoproto.nullable) = false ];
}

message QueryPositionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPositionsResponse {
  repeated Position                               positions   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAddressPositionsRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAddressPositionsResponse {
  repeated Position                               positions   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPositionFeesRequest {
  uint64 id = 1;
}

message QueryPositionFeesResponse {
  cosmos.base.v1beta1.Coin fee_base = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin fee_quote = 2 [ (gogoproto.nullable) = false ];
}
