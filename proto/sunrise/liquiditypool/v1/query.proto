syntax = "proto3";

package sunrise.liquiditypool.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sunrise/liquiditypool/v1/params.proto";
import "sunrise/liquiditypool/v1/pair.proto";
import "sunrise/liquiditypool/v1/pool.proto";
import "sunrise/liquiditypool/v1/twap.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquiditypool/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/params";
  
  }
  
  // Queries a list of Pair items.
  rpc Pair    (QueryGetPairRequest) returns (QueryGetPairResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/pair/base/{base_denom}/quote/{quote_denom}";
  
  }
  rpc PairAll (QueryAllPairRequest) returns (QueryAllPairResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/pair";
  
  }
  
  // Queries a list of Pool items.
  rpc Pool    (QueryGetPoolRequest) returns (QueryGetPoolResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/pool/{id}";
  
  }
  rpc PoolAll (QueryAllPoolRequest) returns (QueryAllPoolResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/pool";
  
  }
  
  // Queries a list of Twap items.
  rpc Twap    (QueryGetTwapRequest) returns (QueryGetTwapResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/twap/base/{base_denom}/quote/{quote_denom}";
  
  }
  rpc TwapAll (QueryAllTwapRequest) returns (QueryAllTwapResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/twap";
  
  }

  rpc SimulateSwapExactAmountIn (QuerySimulateSwapExactAmountInRequest) returns (QuerySimulateSwapExactAmountInResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/simulate/swap-exact-amount-in";
  }

  rpc SimulateSwapExactAmountOut (QuerySimulateSwapExactAmountOutRequest) returns (QuerySimulateSwapExactAmountOutResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/simulate/swap-exact-amount-out";
  }

  rpc SimulateJoinPool (QuerySimulateJoinPoolRequest) returns (QuerySimulateJoinPoolResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/simulate/join-pool";
  }

  rpc SimulateExitPool (QuerySimulateExitPoolRequest) returns (QuerySimulateExitPoolResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/simulate/exit-pool";
  }

  rpc OptimizeSwapExactAmountIn (QueryOptimizeSwapExactAmountInRequest) returns (QueryOptimizeSwapExactAmountInResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/optimize/swap-exact-amount-in";
  }

  rpc OptimizeSwapExactAmountOut (QueryOptimizeSwapExactAmountOutRequest) returns (QueryOptimizeSwapExactAmountOutResponse) {
    option (google.api.http).get = "/sunrise/liquiditypool/v1/optimize/swap-exact-amount-out";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetPairRequest {
  string base_denom = 1;
  string quote_denom = 2;
}

message QueryGetPairResponse {
  Pair pair = 1 [(gogoproto.nullable) = false];
}

message QueryAllPairRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPairResponse {
  repeated Pair                                   pair       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPoolRequest {
  uint64 id = 1;
}

message QueryGetPoolResponse {
  Pool Pool = 1 [(gogoproto.nullable) = false];
}

message QueryAllPoolRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPoolResponse {
  repeated Pool                                   Pool       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTwapRequest {
  string base_denom = 1;
  string quote_denom = 2;
}

message QueryGetTwapResponse {
  Twap twap = 1 [(gogoproto.nullable) = false];
}

message QueryAllTwapRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTwapResponse {
  repeated Twap                                   twap       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySimulateSwapExactAmountInRequest {
  cosmos.base.v1beta1.Coin token_in = 1  [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  repeated SwapRoute routes = 2 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateSwapExactAmountInResponse {
  repeated cosmos.base.v1beta1.Coin tokens_via = 1 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin token_out = 2 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateSwapExactAmountOutRequest {
  cosmos.base.v1beta1.Coin token_out = 1  [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  SwapRoute route = 2 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateSwapExactAmountOutResponse {
  cosmos.base.v1beta1.Coin token_in = 1 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateJoinPoolRequest {
  uint64 pool_id = 1;
  cosmos.base.v1beta1.Coin base_token = 2 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin quote_token = 3 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateJoinPoolResponse {
  string share_amount = 1 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateExitPoolRequest {
  uint64 pool_id = 1;
  string share_amount = 2 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySimulateExitPoolResponse {
  repeated cosmos.base.v1beta1.Coin tokens_out = 1 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryOptimizeSwapExactAmountInRequest {
}

message QueryOptimizeSwapExactAmountInResponse {
}

message QueryOptimizeSwapExactAmountOutRequest {
}

message QueryOptimizeSwapExactAmountOutResponse {
}
