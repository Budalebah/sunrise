syntax = "proto3";

package sunrise.liquiditypool.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/liquiditypool/v1/params.proto";
import "sunrise/liquiditypool/v1/pool.proto";
import "sunrise/liquiditypool/v1/twap.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquiditypool/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreatePool   (MsgCreatePool  ) returns (MsgCreatePoolResponse  );
  rpc UpdatePool   (MsgUpdatePool  ) returns (MsgUpdatePoolResponse  );
  rpc SwapExactAmountIn  (MsgSwapExactAmountIn) returns (MsgSwapExactAmountInResponse);
  rpc SwapExactAmountOut (MsgSwapExactAmountOut) returns (MsgSwapExactAmountOutResponse);
  rpc JoinPool           (MsgJoinPool) returns (MsgJoinPoolResponse);
  rpc ExitPool           (MsgExitPool) returns (MsgExitPoolResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                  "authority";
  option           (amino.name) = "sunrise/x/liquiditypool/v1/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreatePool {
  option (cosmos.msg.v1.signer) = "creator";
  string creator    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string base_denom  = 2;
  string quote_denom = 3;
  string fee_rate = 4 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string f_x = 5;
  string f_y = 6;
  string f_k = 7;
}

message MsgCreatePoolResponse {
  uint64 id = 1;
}

message MsgUpdatePool {
  option (cosmos.msg.v1.signer) = "admin";
  string admin    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 id         = 2;
  string base_denom  = 3;
  string quote_denom = 4;
  string new_admin = 5;
  string fee_rate = 6 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string f_x = 7;
  string f_y = 8;
  string f_k = 9;
}

message MsgUpdatePoolResponse {}

message SwapRoute {
  string base_denom = 1;
  string quote_denom = 2;
  repeated PoolWeight pool_weights = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message PoolWeight {
  uint64 pool_id = 1;
  string weight = 2 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountIn {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin token_in = 2  [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string min_amount_out = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  repeated SwapRoute routes = 4 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountInResponse {
  repeated cosmos.base.v1beta1.Coin tokens_via = 1 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin token_out = 2 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountOut {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin token_out = 2  [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string max_amount_in = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  SwapRoute route = 4 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountOutResponse {
  cosmos.base.v1beta1.Coin token_in = 1 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgJoinPool {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 pool_id = 2;
  cosmos.base.v1beta1.Coin base_token = 3 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin quote_token = 4 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string min_share_amount = 5 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgJoinPoolResponse {
  string share_amount = 1 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgExitPool {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 pool_id = 2;
  string share_amount = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string min_amount_base = 4 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string min_amount_quote = 5 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgExitPoolResponse {
  repeated cosmos.base.v1beta1.Coin tokens_out = 1 [
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}