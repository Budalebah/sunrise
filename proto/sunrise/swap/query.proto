syntax = "proto3";

package sunrise.swap;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sunrise/swap/params.proto";
import "sunrise/swap/in_flight_packet.proto";
import "sunrise/swap/ack_waiting_packet.proto";

option go_package = "github.com/sunriselayer/sunrise/x/swap/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/swap/params";
  
  }
  
  // Queries a list of InFlightPacket items.
  rpc InFlightPacket    (QueryGetInFlightPacketRequest) returns (QueryGetInFlightPacketResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/swap/in_flight_packet/{src_port_id}/{src_channel_id}/{sequence}";
  
  }
  rpc InFlightPacketAll (QueryAllInFlightPacketRequest) returns (QueryAllInFlightPacketResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/swap/in_flight_packet";
  
  }
  
  // Queries a list of AckWaitingPacket items.
  rpc AckWaitingPacket    (QueryGetAckWaitingPacketRequest) returns (QueryGetAckWaitingPacketResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/swap/ack_waiting_packet/{src_port_id}/{src_channel_id}/{sequence}";
  
  }
  rpc AckWaitingPacketAll (QueryAllAckWaitingPacketRequest) returns (QueryAllAckWaitingPacketResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/swap/ack_waiting_packet";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetInFlightPacketRequest {
  string src_port_id    = 1;
  string src_channel_id = 2;
  uint64 sequence       = 3;
}

message QueryGetInFlightPacketResponse {
  InFlightPacket inFlightPacket = 1 [(gogoproto.nullable) = false];
}

message QueryAllInFlightPacketRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInFlightPacketResponse {
  repeated InFlightPacket                         inFlightPacket = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryGetAckWaitingPacketRequest {
  string src_port_id    = 1;
  string src_channel_id = 2;
  uint64 sequence       = 3;
}

message QueryGetAckWaitingPacketResponse {
  AckWaitingPacket ackWaitingPacket = 1 [(gogoproto.nullable) = false];
}

message QueryAllAckWaitingPacketRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAckWaitingPacketResponse {
  repeated AckWaitingPacket                       ackWaitingPacket = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination       = 2;
}

