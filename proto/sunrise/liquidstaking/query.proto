syntax = "proto3";
package sunrise.liquidstaking;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sunrise/liquidstaking/params.proto";

import "sunrise/liquidstaking/liquidstaking.proto";

option go_package = "sunrise/x/liquidstaking/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunrise/liquidstaking/v1/params";
  }

  // LiquidValidators returns liquid validators with states of the liquidstaking module.
  rpc LiquidValidators(QueryLiquidValidatorsRequest) returns (QueryLiquidValidatorsResponse) {
    option (google.api.http).get = "/sunrise/liquidstaking/v1/validators";
  }

  // VotingPower returns voting power of staking and liquid staking module's of the voter that can be exercised.
  rpc VotingPower(QueryVotingPowerRequest) returns (QueryVotingPowerResponse) {
    option (google.api.http).get = "/sunrise/liquidstaking/v1/voting_power/{voter}";
  }

  // States returns states of the liquidstaking module.
  rpc States(QueryStatesRequest) returns (QueryStatesResponse) {
    option (google.api.http).get = "/sunrise/liquidstaking/v1/states";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryLiquidValidatorsRequest is the request type for the Query/LiquidValidators RPC method.
message QueryLiquidValidatorsRequest {}

// QueryLiquidValidatorsResponse is the response type for the Query/LiquidValidators RPC method.
message QueryLiquidValidatorsResponse {
  repeated LiquidValidatorState liquid_validators = 1 [(gogoproto.nullable) = false];
}

// QueryStatesRequest is the request type for the Query/States RPC method.
message QueryStatesRequest {}

// QueryStatesResponse is the response type for the Query/States RPC method.
message QueryStatesResponse {
  NetAmountState net_amount_state = 1 [(gogoproto.nullable) = false];
}

// QueryVotingPowerRequest is the request type for the Query/States RPC method.
message QueryVotingPowerRequest {
  string voter = 1;
}

// QueryVotingPowerResponse is the response type for the Query/States RPC method.
message QueryVotingPowerResponse {
  VotingPower voting_power = 1 [(gogoproto.nullable) = false];
}