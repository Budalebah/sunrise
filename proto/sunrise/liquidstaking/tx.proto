syntax = "proto3";

package sunrise.liquidstaking;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/liquidstaking/params.proto";

import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/sunrise-zone/sunrise-app/x/liquidstaking/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams  (MsgUpdateParams ) returns (MsgUpdateParamsResponse );
  
  // MintDerivative defines a method for converting a delegation into staking deriviatives.
  rpc MintDerivative(MsgMintDerivative) returns (MsgMintDerivativeResponse);

  // BurnDerivative defines a method for converting staking deriviatives into a delegation.
  rpc BurnDerivative(MsgBurnDerivative) returns (MsgBurnDerivativeResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                               "authority";
  option           (amino.name) = "github.com/sunrise-zone/sunrise-app/x/liquidstaking/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgMintDerivative defines the Msg/MintDerivative request type.
message MsgMintDerivative {
  option (cosmos.msg.v1.signer) = "sender";

  // sender is the owner of the delegation to be converted
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator is the validator of the delegation to be converted
  string validator = 2;
  // amount is the quantity of staked assets to be converted
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

// MsgMintDerivativeResponse defines the Msg/MintDerivative response type.
message MsgMintDerivativeResponse {
  // received is the amount of staking derivative minted and sent to the sender
  cosmos.base.v1beta1.Coin received = 1 [(gogoproto.nullable) = false];
}

// MsgBurnDerivative defines the Msg/BurnDerivative request type.
message MsgBurnDerivative {
  option (cosmos.msg.v1.signer) = "sender";

  // sender is the owner of the derivatives to be converted
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator is the validator of the derivatives to be converted
  string validator = 2;
  // amount is the quantity of derivatives to be converted
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

// MsgBurnDerivativeResponse defines the Msg/BurnDerivative response type.
message MsgBurnDerivativeResponse {
  // received is the number of delegation shares sent to the sender
  string received = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}
