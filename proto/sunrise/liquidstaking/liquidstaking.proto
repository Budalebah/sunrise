syntax = "proto3";
package sunrise.liquidstaking;

import "amino/amino.proto";
import "gogoproto/gogo.proto";

import "cosmos_proto/cosmos.proto";

option go_package = "github.com/sunrise-zone/sunrise-app/x/liquidstaking/types";


// ValidatorStatus enumerates the status of a liquid validator.
enum ValidatorStatus {
    // VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
    VALIDATOR_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "ValidatorStatusUnspecified"];
    // VALIDATOR_STATUS_ACTIVE defines the active, valid status
    VALIDATOR_STATUS_ACTIVE = 1 [(gogoproto.enumvalue_customname) = "ValidatorStatusActive"];
    // VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
    VALIDATOR_STATUS_INACTIVE = 2 [(gogoproto.enumvalue_customname) = "ValidatorStatusInactive"];
  }
  
  // WhitelistedValidator consists of the validator operator address and the target weight, which is a value for
  // calculating the real weight to be derived according to the active status. In the case of inactive, it is calculated
  // as zero.
  message WhitelistedValidator {
    option (gogoproto.equal) = true;

    // validator_address defines the bech32-encoded address that whitelisted validator
    string validator_address = 1 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  
    // target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
    // the real weight to be derived according to the active status
    string target_weight = 2 [
      (gogoproto.moretags)   = "yaml:\"target_weight\"",
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  }
  
  // LiquidValidator defines a Validator that can be the target of LiquidStaking and LiquidUnstaking, Active, Weight, etc.
  // fields are derived as functions to deal with by maintaining consistency with the state of the staking module.
  message LiquidValidator {
    // operator_address defines the address of the validator's operator; bech encoded in JSON.
    string operator_address = 1 [(gogoproto.moretags) = "yaml:\"operator_address\""];
  }
  
  // LiquidValidatorState is type LiquidValidator with state added to return to query results.
  message LiquidValidatorState {
    // operator_address defines the address of the validator's operator; bech encoded in JSON.
    string operator_address = 1 [(gogoproto.moretags) = "yaml:\"operator_address\""];
  
    // weight specifies the weight for liquid staking, unstaking amount
    string weight = 2 [
      (gogoproto.moretags)   = "yaml:\"weight\"",
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  
    // status is the liquid validator status
    ValidatorStatus status = 3;
  
    // del_shares define the delegation shares of the validator
    string del_shares = 4 [
      (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Dec"
    ];
  
    // liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
    string liquid_tokens = 5 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  }
  
  // NetAmountState is type for net amount raw data and mint rate, This is a value that depends on the several module
  // state every time, so it is used only for calculation and query and is not stored in kv.
  message NetAmountState {
    // mint_rate is bTokenTotalSupply / NetAmount
    string mint_rate = 1 [
      (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Dec"
    ];
  
    // btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
    string btoken_total_supply = 2 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  
    // net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
    // unbonding balance
    string net_amount = 3 [
      (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Dec"
    ];
  
    // total_del_shares define the delegation shares of all liquid validators
    string total_del_shares = 4 [
      (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Dec"
    ];
  
    // total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
    // amount)
    string total_liquid_tokens = 5 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  
    // total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
    string total_remaining_rewards = 6 [
      (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Dec"
    ];
  
    // total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
    // amount)
    string total_unbonding_balance = 7 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  
    // proxy_acc_balance define the balance of proxy account for the native token
    string proxy_acc_balance = 8 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  }
  
  // VotingPower is type for current voting power of the voter including staking module's voting power and liquid staking
  // module's voting power, It depends on the amount of delegation of staking module, the bonded state of the delegated
  // validator, the value of btoken(liquid_bond_denom), and the pool coin and farming position containing btoken..
  message VotingPower {
    // voter defines the address of the voter; bech encoded in JSON.
    string voter = 1;
  
    // staking_voting_power return the voting power of staking that can be exercised.
    string staking_voting_power = 2 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  
    // liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
    string liquid_staking_voting_power = 3 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  
    // validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
    // exercised.
    string validator_voting_power = 4 [
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable)   = false,
      (cosmos_proto.scalar)  = "cosmos.Int"
    ];
  }